(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1:function(e,n,t){"use strict";t.d(n,"i",function(){return h}),t.d(n,"j",function(){return y}),t.d(n,"a",function(){return f}),t.d(n,"o",function(){return m}),t.d(n,"e",function(){return w}),t.d(n,"f",function(){return v}),t.d(n,"c",function(){return x}),t.d(n,"n",function(){return k}),t.d(n,"h",function(){return j}),t.d(n,"p",function(){return S}),t.d(n,"k",function(){return T}),t.d(n,"m",function(){return I}),t.d(n,"d",function(){return A}),t.d(n,"b",function(){return O}),t.d(n,"g",function(){return E}),t.d(n,"l",function(){return P});var o=t(243),r=(t(102),t(283),t(284),t(19)),l=(t(286),t(288),t(289),t(291),t(72),t(32),t(6)),c=(t(82),t(29),t(22),t(97),t(39),t(15)),d=t(2);function h(e){d.a.config.errorHandler&&d.a.config.errorHandler(e)}function y(e){return e.then(function(e){return e.default||e})}function f(e,n){if(n||!e.options.__hasNuxtData){var t=e.options._originDataFn||e.options.data||function(){return{}};e.options._originDataFn=t,e.options.data=function(){var data=t.call(this);return this.$ssrContext&&(n=this.$ssrContext.asyncData[e.cid]),Object(c.a)({},data,n)},e.options.__hasNuxtData=!0,e._Ctor&&e._Ctor.options&&(e._Ctor.options.data=e.options.data)}}function m(e){return e.options&&e._Ctor===e?e:(e.options?(e._Ctor=e,e.extendOptions=e.options):(e=d.a.extend(e))._Ctor=e,!e.options.name&&e.options.__file&&(e.options.name=e.options.__file),e)}function w(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return Array.prototype.concat.apply([],e.matched.map(function(e,t){return Object.keys(e.components).map(function(o){return n&&n.push(t),e.components[o]})}))}function v(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return Array.prototype.concat.apply([],e.matched.map(function(e,t){return Object.keys(e.instances).map(function(o){return n&&n.push(t),e.instances[o]})}))}function x(e,n){return Array.prototype.concat.apply([],e.matched.map(function(e,t){return Object.keys(e.components).reduce(function(o,r){return e.components[r]?o.push(n(e.components[r],e.instances[r],e,r,t)):delete e.components[r],o},[])}))}function k(e){return Promise.all(x(e,function(){var e=Object(l.a)(regeneratorRuntime.mark(function e(n,t,o,r){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if("function"!=typeof n||n.options){e.next=4;break}return e.next=3,n();case 3:n=e.sent;case 4:return o.components[r]=m(n),e.abrupt("return",o.components[r]);case 6:case"end":return e.stop()}},e)}));return function(n,t,o,r){return e.apply(this,arguments)}}()))}function j(e){return _.apply(this,arguments)}function _(){return(_=Object(l.a)(regeneratorRuntime.mark(function e(n){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,k(n);case 4:return e.abrupt("return",Object(c.a)({},n,{meta:w(n).map(function(e,t){return Object(c.a)({},e.options.meta,(n.matched[t]||{}).meta)})}));case 5:case"end":return e.stop()}},e)}))).apply(this,arguments)}function S(e,n){return C.apply(this,arguments)}function C(){return(C=Object(l.a)(regeneratorRuntime.mark(function e(n,t){var l,c,d,h;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n.context||(n.context={isStatic:!0,isDev:!1,isHMR:!1,app:n,store:n.store,payload:t.payload,error:t.error,base:"/",env:{}},t.req&&(n.context.req=t.req),t.res&&(n.context.res=t.res),t.ssrContext&&(n.context.ssrContext=t.ssrContext),n.context.redirect=function(e,path,t){if(e){n.context._redirected=!0;var o=Object(r.a)(path);if("number"==typeof e||"undefined"!==o&&"object"!==o||(t=path||{},path=e,o=Object(r.a)(path),e=302),"object"===o&&(path=n.router.resolve(path).route.fullPath),!/(^[.]{1,2}\/)|(^\/(?!\/))/.test(path))throw path=N(path,t),window.location.replace(path),new Error("ERR_REDIRECT");n.context.next({path:path,query:t,status:e})}},n.context.nuxtState=window.__NUXT__),e.next=3,Promise.all([j(t.route),j(t.from)]);case 3:l=e.sent,c=Object(o.a)(l,2),d=c[0],h=c[1],t.route&&(n.context.route=d),t.from&&(n.context.from=h),n.context.next=t.next,n.context._redirected=!1,n.context._errored=!1,n.context.isHMR=!!t.isHMR,n.context.params=n.context.route.params||{},n.context.query=n.context.route.query||{};case 15:case"end":return e.stop()}},e)}))).apply(this,arguments)}function T(e,n){return!e.length||n._redirected||n._errored?Promise.resolve():I(e[0],n).then(function(){return T(e.slice(1),n)})}function I(e,n){var t;return(t=2===e.length?new Promise(function(t){e(n,function(e,data){e&&n.error(e),t(data=data||{})})}):e(n))&&(t instanceof Promise||"function"==typeof t.then)||(t=Promise.resolve(t)),t}function A(base,e){var path=decodeURI(window.location.pathname);return"hash"===e?window.location.hash.replace(/^#\//,""):(base&&0===path.indexOf(base)&&(path=path.slice(base.length)),(path||"/")+window.location.search+window.location.hash)}function O(e,n){return function(e){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"===Object(r.a)(e[i])&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$"));return function(t,o){for(var path="",data=t||{},r=o||{},l=r.pretty?R:encodeURIComponent,c=0;c<e.length;c++){var d=e[c];if("string"!=typeof d){var h=data[d.name||"pathMatch"],y=void 0;if(null==h){if(d.optional){d.partial&&(path+=d.prefix);continue}throw new TypeError('Expected "'+d.name+'" to be defined')}if(Array.isArray(h)){if(!d.repeat)throw new TypeError('Expected "'+d.name+'" to not repeat, but received `'+JSON.stringify(h)+"`");if(0===h.length){if(d.optional)continue;throw new TypeError('Expected "'+d.name+'" to not be empty')}for(var f=0;f<h.length;f++){if(y=l(h[f]),!n[c].test(y))throw new TypeError('Expected all "'+d.name+'" to match "'+d.pattern+'", but received `'+JSON.stringify(y)+"`");path+=(0===f?d.prefix:d.delimiter)+y}}else{if(y=d.asterisk?encodeURI(h).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(h),!n[c].test(y))throw new TypeError('Expected "'+d.name+'" to match "'+d.pattern+'", but received "'+y+'"');path+=d.prefix+y}}else path+=d}return path}}(function(e,n){var t,o=[],r=0,l=0,path="",c=n&&n.delimiter||"/";for(;null!=(t=W.exec(e));){var d=t[0],h=t[1],y=t.index;if(path+=e.slice(l,y),l=y+d.length,h)path+=h[1];else{var f=e[l],m=t[2],w=t[3],v=t[4],x=t[5],k=t[6],j=t[7];path&&(o.push(path),path="");var _=null!=m&&null!=f&&f!==m,S="+"===k||"*"===k,C="?"===k||"*"===k,T=t[2]||c,pattern=v||x;o.push({name:w||r++,prefix:m||"",delimiter:T,optional:C,repeat:S,partial:_,asterisk:!!j,pattern:pattern?M(pattern):j?".*":"[^"+L(T)+"]+?"})}}l<e.length&&(path+=e.substr(l));path&&o.push(path);return o}(e,n))}function E(e,n){var t={},o=Object(c.a)({},e,n);for(var r in o)String(e[r])!==String(n[r])&&(t[r]=!0);return t}function P(e){var n;if(e.message||"string"==typeof e)n=e.message||e;else try{n=JSON.stringify(e,null,2)}catch(t){n="[".concat(e.constructor.name,"]")}return Object(c.a)({},e,{message:n,statusCode:e.statusCode||e.status||e.response&&e.response.status||500})}window.onNuxtReadyCbs=[],window.onNuxtReady=function(e){window.onNuxtReadyCbs.push(e)};var W=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function R(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function L(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function M(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function N(e,n){var t,o=e.indexOf("://");-1!==o?(t=e.substring(0,o),e=e.substring(o+3)):e.startsWith("//")&&(e=e.substring(2));var r,l=e.split("/"),c=(t?t+"://":"//")+l.shift(),path=l.filter(Boolean).join("/");return 2===(l=path.split("#")).length&&(path=l[0],r=l[1]),c+=path?"/"+path:"",n&&"{}"!==JSON.stringify(n)&&(c+=(2===e.split("?").length?"&":"?")+function(e){return Object.keys(e).sort().map(function(n){var t=e[n];return null==t?"":Array.isArray(t)?t.slice().map(function(e){return[n,"=",e].join("")}).join("&"):n+"="+t}).filter(Boolean).join("&")}(n)),c+=r?"#"+r:""}},23:function(e,n,t){"use strict";t(22);var o=t(15),r=(t(32),t(6)),l=(t(39),t(2)),c=t(238),d=t.n(c),h=t(77),y=t(1),f=function(){return Object(y.j)(t.e(2).then(t.bind(null,638)))},m=function(){return Object(y.j)(t.e(4).then(t.bind(null,630)))},w=function(){return Object(y.j)(t.e(5).then(t.bind(null,631)))},v=function(){return Object(y.j)(t.e(6).then(t.bind(null,632)))},x=function(){return Object(y.j)(t.e(8).then(t.bind(null,633)))},k=function(){return Object(y.j)(t.e(9).then(t.bind(null,634)))},j=function(){return Object(y.j)(t.e(10).then(t.bind(null,635)))},_=function(){return Object(y.j)(Promise.all([t.e(13),t.e(7)]).then(t.bind(null,636)))},S=function(){return Object(y.j)(t.e(3).then(t.bind(null,637)))};l.a.use(h.a),"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual",window.addEventListener("beforeunload",function(){window.history.scrollRestoration="auto"}),window.addEventListener("load",function(){window.history.scrollRestoration="manual"}));var C=function(e,n,t){var o=!1;return e.matched.length<2&&e.matched.every(function(e){return!1!==e.components.default.options.scrollToTop})?o={x:0,y:0}:e.matched.some(function(e){return e.components.default.options.scrollToTop})&&(o={x:0,y:0}),t&&(o=t),new Promise(function(n){window.$nuxt.$once("triggerScroll",function(){if(e.hash){var t=e.hash;void 0!==window.CSS&&void 0!==window.CSS.escape&&(t="#"+window.CSS.escape(t.substr(1)));try{document.querySelector(t)&&(o={selector:t})}catch(e){console.warn("Failed to save scroll position. Please add CSS.escape() polyfill (https://github.com/mathiasbynens/CSS.escape).")}}n(o)})})};var T=t(239),I=t.n(T),A=Object(o.a)({},I.a,{name:"NoSsr"}),O={name:"NuxtChild",functional:!0,props:{nuxtChildKey:{type:String,default:""},keepAlive:Boolean,keepAliveProps:{type:Object,default:void 0}},render:function(e,n){var t=n.parent,data=n.data,o=n.props;data.nuxtChild=!0;for(var r=t,l=t.$nuxt.nuxt.transitions,c=t.$nuxt.nuxt.defaultTransition,d=0;t;)t.$vnode&&t.$vnode.data.nuxtChild&&d++,t=t.$parent;data.nuxtChildDepth=d;var h=l[d]||c,y={};E.forEach(function(e){void 0!==h[e]&&(y[e]=h[e])});var f={};P.forEach(function(e){"function"==typeof h[e]&&(f[e]=h[e].bind(r))});var m=f.beforeEnter;f.beforeEnter=function(e){if(window.$nuxt.$nextTick(function(){window.$nuxt.$emit("triggerScroll")}),m)return m.call(r,e)};var w=[e("router-view",data)];return o.keepAlive&&(w=[e("keep-alive",{props:o.keepAliveProps},w)]),e("transition",{props:y,on:f},w)}},E=["name","mode","appear","css","type","duration","enterClass","leaveClass","appearClass","enterActiveClass","enterActiveClass","leaveActiveClass","appearActiveClass","enterToClass","leaveToClass","appearToClass"],P=["beforeEnter","enter","afterEnter","enterCancelled","beforeLeave","leave","afterLeave","leaveCancelled","beforeAppear","appear","afterAppear","appearCancelled"],W={name:"NuxtError",props:{error:{type:Object,default:null}},head:function(){return{title:this.message,meta:[{name:"viewport",content:"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"}]}},computed:{statusCode:function(){return this.error&&this.error.statusCode||500},message:function(){return this.error.message||"Error"}}},R=(t(295),t(16)),L=Object(R.a)(W,function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"__nuxt-error-page"},[t("div",{staticClass:"error"},[t("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"90",height:"90",fill:"#DBE1EC",viewBox:"0 0 48 48"}},[t("path",{attrs:{d:"M22 30h4v4h-4zm0-16h4v12h-4zm1.99-10C12.94 4 4 12.95 4 24s8.94 20 19.99 20S44 35.05 44 24 35.04 4 23.99 4zM24 40c-8.84 0-16-7.16-16-16S15.16 8 24 8s16 7.16 16 16-7.16 16-16 16z"}})]),e._v(" "),t("div",{staticClass:"title"},[e._v(e._s(e.message))]),e._v(" "),404===e.statusCode?t("p",{staticClass:"description"},[t("NuxtLink",{staticClass:"error-link",attrs:{to:"/"}},[e._v("Back to the home page")])],1):e._e(),e._v(" "),e._m(0)])])},[function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"logo"},[n("a",{attrs:{href:"https://nuxtjs.org",target:"_blank",rel:"noopener"}},[this._v("Nuxt.js")])])}],!1,null,null,null).exports,M=(t(48),t(49),t(29),{name:"Nuxt",components:{NuxtChild:O,NuxtError:L},props:{nuxtChildKey:{type:String,default:void 0},keepAlive:Boolean,keepAliveProps:{type:Object,default:void 0},name:{type:String,default:"default"}},computed:{routerViewKey:function(){if(void 0!==this.nuxtChildKey||this.$route.matched.length>1)return this.nuxtChildKey||Object(y.b)(this.$route.matched[0].path)(this.$route.params);var e=this.$route.matched[0]&&this.$route.matched[0].components.default;if(e&&e.options){var n=e.options,t=n.key,o=n.watchQuery;if(t)return"function"==typeof t?t(this.$route):t;if(o){if(o.length){var r={},l=!0,c=!1,d=void 0;try{for(var h,f=o[Symbol.iterator]();!(l=(h=f.next()).done);l=!0){var m=h.value;r[m]=this.$route.query[m]}}catch(e){c=!0,d=e}finally{try{l||null==f.return||f.return()}finally{if(c)throw d}}return this.$router.resolve({path:this.$route.path,query:r}).href}return this.$route.fullPath}}return this.$route.path}},beforeCreate:function(){l.a.util.defineReactive(this,"nuxt",this.$root.$options.nuxt)},render:function(e){return this.nuxt.err?e("NuxtError",{props:{error:this.nuxt.err}}):e("NuxtChild",{key:this.routerViewKey,props:this.$props})}}),N={name:"NuxtLoading",data:function(){return{percent:0,show:!1,canSucceed:!0,reversed:!1,skipTimerCount:0,rtl:!1,throttle:200,duration:5e3,continuous:!1}},computed:{left:function(){return!(!this.continuous&&!this.rtl)&&(this.rtl?this.reversed?"0px":"auto":this.reversed?"auto":"0px")}},beforeDestroy:function(){this.clear()},methods:{clear:function(){clearInterval(this._timer),clearTimeout(this._throttle),this._timer=null},start:function(){var e=this;return this.clear(),this.percent=0,this.reversed=!1,this.skipTimerCount=0,this.canSucceed=!0,this.throttle?this._throttle=setTimeout(function(){return e.startTimer()},this.throttle):this.startTimer(),this},set:function(e){return this.show=!0,this.canSucceed=!0,this.percent=Math.min(100,Math.max(0,Math.floor(e))),this},get:function(){return this.percent},increase:function(e){return this.percent=Math.min(100,Math.floor(this.percent+e)),this},decrease:function(e){return this.percent=Math.max(0,Math.floor(this.percent-e)),this},pause:function(){return clearInterval(this._timer),this},resume:function(){return this.startTimer(),this},finish:function(){return this.percent=this.reversed?0:100,this.hide(),this},hide:function(){var e=this;return this.clear(),setTimeout(function(){e.show=!1,e.$nextTick(function(){e.percent=0,e.reversed=!1})},500),this},fail:function(){return this.canSucceed=!1,this},startTimer:function(){var e=this;this.show||(this.show=!0),void 0===this._cut&&(this._cut=1e4/Math.floor(this.duration)),this._timer=setInterval(function(){e.skipTimerCount>0?e.skipTimerCount--:(e.reversed?e.decrease(e._cut):e.increase(e._cut),e.continuous&&(e.percent>=100?(e.skipTimerCount=1,e.reversed=!e.reversed):e.percent<=0&&(e.skipTimerCount=1,e.reversed=!e.reversed)))},100)}},render:function(e){var n=e(!1);return this.show&&(n=e("div",{staticClass:"nuxt-progress",class:{"nuxt-progress-notransition":this.skipTimerCount>0,"nuxt-progress-failed":!this.canSucceed},style:{width:this.percent+"%",left:this.left}})),n}},$=(t(297),Object(R.a)(N,void 0,void 0,!1,null,null,null).exports),D=(t(299),Object(R.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("header",[t("div",{staticClass:"ui container text-normal"},[t("span",{staticClass:"site-title-header"},[t("nuxt-link",{attrs:{to:"https://nicholasgriffin.dev"}},[e._v("\n            Nicholas Griffin\n            ")])],1),e._v(" "),t("div",{staticClass:"site-links-header"},[t("nuxt-link",{attrs:{to:"https://nicholasgriffin.dev"}},[e._v("\n                Home\n            ")])],1)])]),e._v(" "),t("nuxt"),e._v(" "),e._m(0),e._v(" "),t("link",{attrs:{href:"/css/main.15f091f2.css",rel:"stylesheet"}}),e._v(" "),t("link",{attrs:{href:"https://fonts.googleapis.com/css?family=Open+Sans:400,700",rel:"stylesheet"}}),e._v(" "),t("script",[e._v("\n    // Check for Promises and fetch\n    window.Promise || document.write('<script src=\"js/es6-promise.min.js\" ><\\/script>');\n    window.fetch || document.write('<script src=\"js/fetch.min.js\"><\\/script>');\n")]),e._v(" "),t("script",{attrs:{type:"text/javascript"}},[e._v("\n    window.addEventListener(\"DOMContentLoaded\", function (event) {\n        // Load the service worker\n        if ('serviceWorker' in navigator) {\n\n            navigator.serviceWorker.register('/serviceworker.js', { scope: '/'}) \n\n            .then( function( registration) {\n                console.log(`Service Worker successfully registered for`, registration.scope);\n            } )\n\n            .catch( function( error ) {\n                console.log(`ServiceWorker not registered: ${error}`);\n            } );\n\n            if(navigator.serviceWorker.controller) {\n                window.addEventListener('load', function() {\n                    navigator.serviceWorker.controller.postMessage({'command': 'trimCaches'});\n                })\n            }\n        }\n    });\n")])],1)},[function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"cookies js-cookie-message",attrs:{hidden:""}},[n("div",{staticClass:"cookies__box"},[n("p",[n("strong",[this._v("\n            Another 🍪\n            notification.\n          ")]),this._v(" "),n("br"),this._v("Sorry to bug you, I know these are annoying, just letting you know that I\n          am\n          using cookies on this site to track analytics, annoymously of course.\n        ")]),this._v(" "),n("button",{staticClass:"button button--primary"},[this._v("That's fine")])])])}],!1,null,null,null).exports),z=(t(301),{_default:D,_homepage:Object(R.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("nuxt"),e._v(" "),e._m(0),e._v(" "),t("link",{attrs:{href:"/css/main.15f091f2.css",rel:"stylesheet"}}),e._v(" "),t("link",{attrs:{href:"https://fonts.googleapis.com/css?family=Open+Sans:400,700",rel:"stylesheet"}}),e._v(" "),t("script",[e._v("\n// Check for Promises and fetch\nwindow.Promise ||\n  document.write('<script src=\"js/es6-promise.min.js\" ><\\/script>');\nwindow.fetch || document.write('<script src=\"js/fetch.min.js\"><\\/script>');\n  ")]),e._v(" "),t("script",{attrs:{type:"text/javascript"}},[e._v('\nwindow.addEventListener("DOMContentLoaded", function(event) {\n  // Load the service worker\n  if ("serviceWorker" in navigator) {\n    navigator.serviceWorker\n      .register("/serviceworker.js", { scope: "/" })\n\n      .then(function(registration) {\n        console.log(\n          `Service Worker successfully registered for`,\n          registration.scope\n        );\n      })\n\n      .catch(function(error) {\n        console.log(`ServiceWorker not registered: ${error}`);\n      });\n\n    if (navigator.serviceWorker.controller) {\n      window.addEventListener("load", function() {\n        navigator.serviceWorker.controller.postMessage({\n          command: "trimCaches"\n        });\n      });\n    }\n  }\n});\n  ')]),e._v(" "),t("script",{attrs:{src:"js/lazyload.min.js"}}),e._v(" "),t("script",{attrs:{src:"js/typed.min.js",type:"text/javascript"}}),e._v(" "),t("script",{attrs:{src:"js/nghpjs.js"}})],1)},[function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"cookies js-cookie-message",attrs:{hidden:""}},[n("div",{staticClass:"cookies__box"},[n("p",[n("strong",[this._v("\n          Another 🍪\n          notification.\n        ")]),this._v(" "),n("br"),this._v("Sorry to bug you, I know these are annoying, just letting you know that I\n        am\n        using cookies on this site to track analytics, annoymously of course.\n      ")]),this._v(" "),n("button",{staticClass:"button button--primary"},[this._v("That's fine")])])])}],!1,null,null,null).exports}),U={head:{title:"Nicholas Griffin - Web Developer, Blogger and Technology Enthusiast",meta:[{charset:"utf-8"},{name:"viewport",content:"width=device-width, initial-scale=1"},{hid:"description",name:"description",content:"My personal website"},{hid:"keywords",name:"keywords",content:"web developer,blogger,technology,founder,TechNutty"},{hid:"author",name:"author",content:"Nicholas Griffin"},{hid:"mobile-web-app-capable",name:"mobile-web-app-capable",content:"yes"},{hid:"apple-mobile-web-app-title",name:"apple-mobile-web-app-title",content:"nicholasgriffin"},{hid:"theme-color",name:"theme-color",content:"#fff"},{hid:"og:type",name:"og:type",property:"og:type",content:"website"},{hid:"og:title",name:"og:title",property:"og:title",content:"nicholasgriffin"},{hid:"og:site_name",name:"og:site_name",property:"og:site_name",content:"nicholasgriffin"},{hid:"og:description",name:"og:description",property:"og:description",content:"My personal website"}],link:[{rel:"icon",type:"image/x-icon",href:"/favicon.ico"},{rel:"icon",type:"apple-touch-icon",href:"/icons/apple-touch-icon-57x57.png"},{rel:"icon",type:"apple-touch-icon",href:"/icons/apple-touch-icon-60x60.png"},{rel:"icon",type:"apple-touch-icon",href:"/icons/apple-touch-icon-72x72.png"},{rel:"icon",type:"apple-touch-icon",href:"/icons/apple-touch-icon-76x76.png"},{rel:"icon",type:"apple-touch-icon",href:"/icons/apple-touch-icon-114x114.png"},{rel:"icon",type:"apple-touch-icon",href:"/icons/apple-touch-icon-120x120.png"},{rel:"icon",type:"apple-touch-icon",href:"/icons/apple-touch-icon-144x144.png"},{rel:"icon",type:"apple-touch-icon",href:"/icons/apple-touch-icon-152x152.png"},{rel:"icon",type:"apple-touch-icon",href:"/icons/apple-touch-icon-180x180.png"},{rel:"icon",type:"apple-touch-icon",href:"/icons/favicon-32x32.png",sizes:"32x32"},{rel:"icon",type:"apple-touch-icon",href:"/icons/android-chrome-192x192.png",sizes:"192x192"},{rel:"icon",type:"apple-touch-icon",href:"/icons/favicon-96x96.png",sizes:"96x96"},{rel:"icon",type:"apple-touch-icon",href:"/icons/favicon-16x16.png",sizes:"16x16"},{rel:"mask-icon",type:"apple-touch-icon",href:"/icons/safari-pinned-tab.svg",color:"#5bbad5"},{name:"apple-mobile-web-app-title",content:"Nicholas Griffin"},{name:"application-name",content:"Nicholas Griffin"},{name:"theme-color",content:"#5bbad5"},{rel:"manifest",href:"/manifest.json"},{rel:"shortcut icon",href:"/_nuxt/icons/icon_64.8AAfD9L2mjc.png"},{rel:"apple-touch-icon",href:"/_nuxt/icons/icon_512.8AAfD9L2mjc.png",sizes:"512x512"}],style:[],script:[{src:"//www.googletagmanager.com/gtm.js?id=GTM-NK46QBJ&l=dataLayer",async:!0}],htmlAttrs:{lang:"en"}},render:function(e,n){var t=e("NuxtLoading",{ref:"loading"}),o=e(this.layout||"nuxt"),r=e("div",{domProps:{id:"__layout"},key:this.layoutName},[o]),l=e("transition",{props:{name:"layout",mode:"out-in"},on:{beforeEnter:function(e){window.$nuxt.$nextTick(function(){window.$nuxt.$emit("triggerScroll")})}}},[r]);return e("div",{domProps:{id:"__nuxt"}},[t,l])},data:function(){return{isOnline:!0,layout:null,layoutName:""}},beforeCreate:function(){l.a.util.defineReactive(this,"nuxt",this.$options.nuxt)},created:function(){l.a.prototype.$nuxt=this,window.$nuxt=this,this.refreshOnlineStatus(),window.addEventListener("online",this.refreshOnlineStatus),window.addEventListener("offline",this.refreshOnlineStatus),this.error=this.nuxt.error},mounted:function(){this.$loading=this.$refs.loading},watch:{"nuxt.err":"errorChanged"},computed:{isOffline:function(){return!this.isOnline}},methods:{refreshOnlineStatus:function(){void 0===window.navigator.onLine?this.isOnline=!0:this.isOnline=window.navigator.onLine},errorChanged:function(){this.nuxt.err&&this.$loading&&(this.$loading.fail&&this.$loading.fail(),this.$loading.finish&&this.$loading.finish())},setLayout:function(e){return e&&z["_"+e]||(e="default"),this.layoutName=e,this.layout=z["_"+e],this.layout},loadLayout:function(e){return e&&z["_"+e]||(e="default"),Promise.resolve(z["_"+e])}},components:{NuxtLoading:$}},F=(t(69),t(102),t(72),t(78));l.a.use(F.a);var G=console,B={};(B=function(e,n){if((e=e.default||e).commit)throw new Error("[nuxt] ".concat(n," should export a method that returns a Vuex instance."));return"function"!=typeof e&&(e=Object.assign({},e)),Y(e,n)}(t(303),"store/index.js")).modules=B.modules||{};var J=B instanceof Function?B:function(){return new F.a.Store(Object.assign({strict:!1},B))};function Y(e,n){if(e.state&&"function"!=typeof e.state){G.warn("'state' should be a method that returns an object in ".concat(n));var t=Object.assign({},e.state);e=Object.assign({},e,{state:function(){return t}})}return e}var H=t(79),K=t.n(H),V=function(e,n){return X.apply(this,arguments)};function X(){return(X=Object(r.a)(regeneratorRuntime.mark(function e(n,t){var o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:t((o={accessibleIcons:!0,iconProperty:"$icon",icons:{64:"/_nuxt/icons/icon_64.8AAfD9L2mjc.png",120:"/_nuxt/icons/icon_120.8AAfD9L2mjc.png",144:"/_nuxt/icons/icon_144.8AAfD9L2mjc.png",152:"/_nuxt/icons/icon_152.8AAfD9L2mjc.png",192:"/_nuxt/icons/icon_192.8AAfD9L2mjc.png",384:"/_nuxt/icons/icon_384.8AAfD9L2mjc.png",512:"/_nuxt/icons/icon_512.8AAfD9L2mjc.png"}}).iconProperty.replace("$",""),Q(o.icons));case 2:case"end":return e.stop()}},e)}))).apply(this,arguments)}for(var Q=function(e){return function(n){return e[n]||""}},Z=t(19),ee=t(240),ne=t(241),te=function(){function e(n,t){Object(ee.a)(this,e),this.ctx=n,this.options=t}return Object(ne.a)(e,[{key:"init",value:function(){window[this.options.layer]=window[this.options.layer]||[],this.pushEvent({event:"gtm.js","gtm.start":(new Date).getTime()}),this.options.respectDoNotTrack||!this.options.pageTracking||this.hasDNT()||this.initPageTracking()}},{key:"initPageTracking",value:function(){var e=this;this.ctx.app.router.afterEach(function(n,t){setTimeout(function(){window[e.options.layer].push(n.gtm||{event:"nuxtRoute",pageType:"PageView",pageUrl:n.fullPath,routeName:n.name})},0)})}},{key:"pushEvent",value:function(e){try{if(!window||!window[this.options.layer])throw new Error("missing GTM dataLayer");if("object"!==Object(Z.a)(e))throw new Error("event should be an object");if(!e.hasOwnProperty("event"))throw new Error("missing event property");window[this.options.layer].push(e)}catch(e){console.error("[ERROR] [GTM]",e)}}},{key:"hasDNT",value:function(){return"1"===window.doNotTrack||"yes"===navigator.doNotTrack||"1"===navigator.doNotTrack||"1"===navigator.msDoNotTrack||window.external&&window.external.msTrackingProtectionEnabled&&window.external.msTrackingProtectionEnabled()}}]),e}(),oe=function(e,n){var t=new te(e,{id:"GTM-NK46QBJ",pageTracking:!1,layer:"dataLayer",respectDoNotTrack:!1,dev:!0,env:{},query:{}});n("gtm",t),t.init()},se=t(242),ae=t.n(se),re={setHeader:function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"common",o=!0,r=!1,l=void 0;try{for(var c,d=(Array.isArray(t)?t:[t])[Symbol.iterator]();!(o=(c=d.next()).done);o=!0){var h=c.value;if(!n)return void delete this.defaults.headers[h][e];this.defaults.headers[h][e]=n}}catch(e){r=!0,l=e}finally{try{o||null==d.return||d.return()}finally{if(r)throw l}}},setToken:function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"common",o=e?(n?n+" ":"")+e:null;this.setHeader("Authorization",o,t)},onRequest:function(e){this.interceptors.request.use(function(n){return e(n)||n})},onResponse:function(e){this.interceptors.response.use(function(n){return e(n)||n})},onRequestError:function(e){this.interceptors.request.use(void 0,function(n){return e(n)||Promise.reject(n)})},onResponseError:function(e){this.interceptors.response.use(void 0,function(n){return e(n)||Promise.reject(n)})},onError:function(e){this.onRequestError(e),this.onResponseError(e)}},ie=function(){var e=pe[le];re["$"+e]=function(){return this[e].apply(this,arguments).then(function(e){return e&&e.data})}},le=0,pe=["request","delete","get","head","options","post","put","patch"];le<pe.length;le++)ie();var ce=function(e,n){var t={baseURL:"http://localhost:3000/",headers:{common:{Accept:"application/json, text/plain, */*"},delete:{},get:{},head:{},post:{},put:{},patch:{}}};t.headers.common=e.req&&e.req.headers?Object.assign({},e.req.headers):{},delete t.headers.common.accept,delete t.headers.common.host,delete t.headers.common["cf-ray"],delete t.headers.common["cf-connecting-ip"];var o=ae.a.create(t);!function(e){for(var n in re)e[n]=re[n].bind(e)}(o),function(e,n){var t={finish:function(){},start:function(){},fail:function(){},set:function(){}},o=function(){return window.$nuxt&&window.$nuxt.$loading&&window.$nuxt.$loading.set?window.$nuxt.$loading:t},r=0;e.onRequest(function(e){e&&!1===e.progress||r++}),e.onResponse(function(e){e&&e.config&&!1===e.config.progress||--r<=0&&(r=0,o().finish())}),e.onError(function(e){e&&e.config&&!1===e.config.progress||(r--,o().fail(),o().finish())});var l=function(e){if(r){var progress=100*e.loaded/(e.total*r);o().set(Math.min(100,progress))}};e.defaults.onUploadProgress=l,e.defaults.onDownloadProgress=l}(o),e.$axios=o,n("axios",o)};t.d(n,"b",function(){return he}),t.d(n,"a",function(){return L}),l.a.component(A.name,A),l.a.component(O.name,O),l.a.component("NChild",O),l.a.component(M.name,M),l.a.use(d.a,{keyName:"head",attribute:"data-n-head",ssrAttribute:"data-n-head-ssr",tagIDKeyName:"hid"});var de={name:"page",mode:"out-in",appear:!1,appearClass:"appear",appearActiveClass:"appear-active",appearToClass:"appear-to"};function he(e){return ue.apply(this,arguments)}function ue(){return(ue=Object(r.a)(regeneratorRuntime.mark(function e(n){var t,r,c,d,T,I,path,A;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,new h.a({mode:"history",base:decodeURI("/"),linkActiveClass:"nuxt-link-active",linkExactActiveClass:"nuxt-link-exact-active",scrollBehavior:C,routes:[{path:"/blog",component:f,name:"blog"},{path:"/login",component:m,name:"login"},{path:"/logout",component:w,name:"logout"},{path:"/offline",component:v,name:"offline"},{path:"/shite",component:x,name:"shite"},{path:"/signup",component:k,name:"signup"},{path:"/technutty",component:j,name:"technutty"},{path:"/post-single/:post?",component:_,name:"post-single-post"},{path:"/",component:S,name:"index"}],fallback:!1});case 2:return t=e.sent,(r=J(n)).$router=t,c=r.registerModule,r.registerModule=function(path,e,n){return c.call(r,path,e,Object.assign({preserveState:!0},n))},d=Object(o.a)({router:t,store:r,nuxt:{defaultTransition:de,transitions:[de],setTransitions:function(e){return Array.isArray(e)||(e=[e]),e=e.map(function(e){return e=e?"string"==typeof e?Object.assign({},de,{name:e}):Object.assign({},de,e):de}),this.$options.nuxt.transitions=e,e},err:null,dateErr:null,error:function(e){e=e||null,d.context._errored=!!e,e=e?Object(y.l)(e):null;var t=this.nuxt||this.$options.nuxt;return t.dateErr=Date.now(),t.err=e,n&&(n.nuxt.error=e),e}}},U),r.app=d,T=n?n.next:function(e){return d.router.push(e)},n?I=t.resolve(n.url).route:(path=Object(y.d)(t.options.base),I=t.resolve(path).route),e.next=13,Object(y.p)(d,{route:I,next:T,error:d.nuxt.error.bind(d),store:r,payload:n?n.payload:void 0,req:n?n.req:void 0,res:n?n.res:void 0,beforeRenderFns:n?n.beforeRenderFns:void 0,ssrContext:n});case 13:if(A=function(e,n){if(!e)throw new Error("inject(key, value) has no key provided");if(void 0===n)throw new Error("inject(key, value) has no value provided");d[e="$"+e]=n,r[e]=d[e];var t="__nuxt_"+e+"_installed__";l.a[t]||(l.a[t]=!0,l.a.use(function(){l.a.prototype.hasOwnProperty(e)||Object.defineProperty(l.a.prototype,e,{get:function(){return this.$root.$options[e]}})}))},window.__NUXT__&&window.__NUXT__.state&&r.replaceState(window.__NUXT__.state),"function"!=typeof K.a){e.next=18;break}return e.next=18,K()(d.context,A);case 18:if("function"!=typeof V){e.next=21;break}return e.next=21,V(d.context,A);case 21:if("function"!=typeof oe){e.next=24;break}return e.next=24,oe(d.context,A);case 24:if("function"!=typeof ce){e.next=27;break}return e.next=27,ce(d.context,A);case 27:e.next=30;break;case 30:return e.abrupt("return",{app:d,store:r,router:t});case 31:case"end":return e.stop()}},e)}))).apply(this,arguments)}},247:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: Let's begin again...\npublished: true\ndescription: Nicholas Griffin V.Something\ntags: Meta\nthumbnail: https://i.ibb.co/g6MPvkg/Screenshot-2019-03-02-at-21-45-38.jpg\nheader: https://i.ibb.co/g6MPvkg/Screenshot-2019-03-02-at-21-45-38.jpg\nctime: 2019-04-01\n---\n\n## So it has been some time since I last posted any content on the web...\n\nBack in May 2011, I started my own technology, gadget and gaming site on the web called Technutty. It originally started out as an idea that I hoped would help me get better at writing content while working on various things that I wanted to learn over the next few years.\n\nAnd this worked out pretty well, which is strange considering that this never normally happens in the real world.\n\nI kept running the site for a few years and over time I found myself reviewing more technology products for companies, spending longer researching things to write and coming up with ways to expand the site even further, but despite enjoying the work, I wasn't really enjoying the time I had to spend on it and my passions where moving closer to front and back end web development, stemming from some of the freelance work that I was doing as well as the work that I was doing to improve the site so I decided that it was time to move on.\n\n![](https://media.giphy.com/media/k8php2iMXNUmA/giphy.gif)\n\nSo long story short, in Jan 2019 I shut down TechNutty and started a new role as a web developer at a company called Accrosoft.\n\nI have now been there for over a year, working on numerous projects for a range of companies across the globe, all of which are helping me to expand my capabilities and makes every day a little more interesting, however, I found that I am now doing less for myself and I don't like the idea of that, so I'm tackling it head-on.\n\nAlongside the release of this blog post, I have created a brand new server for my personal site (now on a .dev domain!), which uses docker and a custom Node environment with Express.\n\nI am hoping that with this new server I will be able to start working on a number of projects that I can talk about here, or not.\n\nBasically, I'm just looking to do me a little more.\n\nFeel free to follow along.\n\n![](https://media.giphy.com/media/oS8pRFxbD0d44/giphy.gif)"},248:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: How I built a blog with Node, Express and Mongo\npublished: true\ndescription: Let\'s get blogging!\ntags: javascript,Express,Node,Mongo\nthumbnail: https://nicholasgriffin.dev/uploads/bp/2019/March/postman_addpost_2019.jpg\nheader: https://nicholasgriffin.dev/uploads/bp/2019/March/postman_addpost_2019.jpg\nctime: 2019-04-02\n---\n\nSo with the move to my new server, I had to create something that would allow me to create a set blog post like the one you are reading now. One of my aims for 2019 and onwards is to do more development and projects that don\'t really have any aim, simply to learn new stuff.\n\nTo kick that off, I needed some kind of platform that would allow me to submit posts to my site, over an authenticated user but without using any kind of third party, as I want my new site to depend on fewer third-parties and the whole aim of this project is to do more for myself.\n\nSo I got to work on a new platform that uses the Express basis that I previously created alongside Mongo for storing the posts and Passport.js for the JWT authentication on the APIs that I would be creating. For now the blog platform is all API based, however, I will be expanding this with a full login and dashboard system soon.\n\n## Let\'s get started\n\nBefore you can begin this for yourself, you will need to create a starter Node application with Express installed, there are numerous tutorials around the web for doing this and the platform changes regularly so it might be best to do some [Googling](https://www.google.com/search?q=node+express+starter "Google Node Express Starter") for that part.\n\nOnce you have a Node app ready, you will need to get a Mongo server setup and you will need to install the Mongoose package within your Node application.\n\nOn a mac, you can install a Mongo server with the following command:\n\n<pre class="graf graf--pre graf-after--p" id="90bc">brew install mongo  \nmkdir -p /data/db  \nsudo chown -R `id -un` /data/db</pre>\n\nOnce complete, simply run mongod to startup your Mongo DB on localhost. For a server, you may want to look into something different. Personally, I quite like the [MongoDB Cloud service](https://www.mongodb.com/cloud) for development.\n\nAnd for the Mongoose install, run the following within your Node terminal (you may have to open a new window).\n\n<pre class="graf graf--pre graf-after--p" id="e0a2">npm install mongoose --save</pre>\n\nThen in your main app.js file add the following to start the mongodb server:\n\n<pre class="graf graf--pre graf-after--p" id="4cfa">var mongoose = require(\'mongoose\')  \nmongoose.connect("mongodb://localhost:27017/my-blog")</pre>\n\nYou may need to change localhost to your domain if you are using something else, alongside the ending database name. I\'ve set it as my-blog for now for this post.\n\n**Setting up body parser**\n\nWhile we are entering commands, it would be a good idea to install body parser from NPM. This module works great for parsing data that has been passed to your application, we will be using it to parse the data that is passed to the POST API that we will be setting up later.\n\nTo get started with body parser, run the following command in your Terminal window:\n\n<pre class="graf graf--pre graf-after--p" id="b26d">npm install body-parser</pre>\n\nThen include the following within your main application file:\n\n<pre class="graf graf--pre graf-after--p" id="ec95">var bodyParser = require(\'body-parser\')  \napp.use(bodyParser.json())  \napp.use(bodyParser.urlencoded({ extended: true}))</pre>\n\n**Setting up the Mongo schema**\n\nWe are almost done but before we can start sending blog post data we will need to set up our Mongo database table and the schema that will be linked to that table.\n\nTo do that, you will need to add the following to your main application file:\n\n<pre class="graf graf--pre graf-after--p" id="24c3">var postSchema = new mongoose.Schema({ posttype: String, title: String, date: String, image: String, excerpt: String, body:  String });</pre>\n\n<pre class="graf graf--pre graf-after--pre" id="9285">var Post = mongoose.model(\'Post\', postSchema);</pre>\n\nI\'ve added a few items to the schema here, but basically, you just need to set what your mongo will accept and the type that it should expect. You can [find out more about Mongoose schemas here](https://mongoosejs.com/docs/guide.html).\n\n**Setting up your API for adding new posts**\n\nFor this first part, we will be setting up a simplistic API for adding new posts, however, I am aiming to release another blog post soon with more about authenticating APIs with Passport.js. I didn\'t want to fill this one with too much just yet.\n\nAnyway, to set up your new API you will need to include the following within your application file:\n\n<pre class="graf graf--pre graf-after--p" id="8df2">app.post(\'/launchpost\', (req, res) => {  \n    var postData = new Post(req.body);  \n    postData.save().then( result => {  \n        res.redirect(\'/\');  \n    }).catch(err => {  \n        res.status(400).send("Unable to save data");  \n    });  \n});</pre>\n\nThis is a pretty simplistic listener that will link to any post request sent to the \'/launchpost\' path on your domain, you can change this to whatever you like as the name doesn\'t really matter.\n\nWhen someone sends a post request to this path it will grab the data from the body, save it in your configured Mongo table and then redirect the user to the homepage.\n\nIf you\'d prefer to not have the redirect, you could change that line to the following:\n\n<pre class="graf graf--pre graf-after--p" id="8df2">res.status(200).send("Post saved.");</pre>\n\nIt will then simply send back a message that says \'Post saved\', you could also expand this to send back the generated post ID.\n\nYou can query this API with Postman like this:\n\n![](/uploads/bp/2019/March/postman_addpost_2019.jpg)\n\n**Setting up your API for removing posts**\n\nSometimes you might want to remove a post that you have previously added so it might also make sense to create an API that will allow you to easily remove posts that you have previously published. You can do that with the following:\n\n<pre class="graf graf--pre graf-after--p" id="8df2">app.post(\'/removepost\', (req, res) => {  \n    var postData = new Post({_id: req.body.id});  \n    postData.remove().then( result => {  \n        res.redirect(\'/\');  \n    }).catch(err => {  \n        res.status(400).send("Unable to remove data");  \n    });  \n});</pre>\n\nAgain, feel free to change the name of the post or how it responds.\n\nAnd querying it in Postman will look like this:\n\n![](/uploads/bp/2019/March/postman_removepost_2019.jpg)\n\n**Displaying your blog post**\n\nNow that you have your APIs ready, you should probably set up a page to do this.\n\nPersonally, I quite like how the EJS templating engine works, so we will be using that to build the templates and then ultimately show the posts.\n\nYou can install EJS via your terminal window with the following command:\n\n<pre class="graf graf--pre graf-after--p" id="e345">npm install ejs --save</pre>\n\nYou will then need to add the following to your application so that Express will use the engine:\n\n<pre class="graf graf--pre graf-after--p" id="62ae">app.engine(\'html\', require(\'ejs\').renderFile);  \napp.set(\'view engine\', \'html\');</pre>\n\nBy default, EJS will look for template files in a directory named \'views\' so you will need to create that and then add an index.html file within that directory.\n\nThere\'s a lot you can do with EJS in terms of templates, however, for this tutorial we are going to keep things simple, so within this html file we will simply be adding the code to display our posts, feel free to take at look at the EJS documentation to learn more about how to use it.\n\nBut before then, be sure to include the following code within your index.html file for the displaying of blog posts:\n\n<pre style="margin: 0; line-height: 125%">    <% <span style="color: #0000aa">if</span>(posts){ %>     <% <span style="color: #0000aa">for</span>(let i = <span style="color: #009999">0</span>; i < posts.length; i++) { %>     <div class=<span style="color: #aa5500">"card"</span>>         <div class=<span style="color: #aa5500">"image"</span>>         <img src=<span style="color: #aa5500">"<%= posts[i].image %>"</span>>         </div>         <div class=<span style="color: #aa5500">"content"</span>>         <a class=<span style="color: #aa5500">"header"</span>><%= posts[i].title %></a>         <div class=<span style="color: #aa5500">"meta"</span>>             <span class=<span style="color: #aa5500">"date"</span>><%= posts[i].date %></span>         </div>         <div class=<span style="color: #aa5500">"description"</span>>             <%= posts[i].excerpt %>         </div>         </div>         <div class=<span style="color: #aa5500">"extra content"</span>>         <a class=<span style="color: #aa5500">"ui button primary basic inverted"</span> href=<span style="color: #aa5500">"/post-single?postID=<%= posts[i]._id %>"</span>>             Read more         </a>         </div>     </div>     <% } %> <% } %> </pre>\n\nFinally, you\'ll need to add the route for your homepage like the following:\n\n<pre style="margin: 0; line-height: 125%">app.get(<span style="color: #aa5500">"/"</span>, (req, res) => {    Post.find({}, (err, posts) => {       res.render(<span style="color: #aa5500">\'index\'</span>, { posts: posts})    }); }); </pre>\n\nAnd for our single page route (you\'ll need create a page for this like the homepage):\n\n<pre style="margin: 0; line-height: 125%">app.get(<span style="color: #aa5500">"/post-single"</span>, (req, res) => {     Post.find({ <span style="color: #aa5500">\'_id\'</span>: req.query.postID }, (err, posts) => {        res.render(<span style="color: #aa5500">\'post-single\'</span>, { posts: posts})     }).sort({date: <span style="color: #aa5500">\'descending\'</span>}); }); </pre>\n\n## And now you are ready to go!\n\n![](https://media.giphy.com/media/s2qXK8wAvkHTO/giphy.gif)\n\nYou are ready to get blogging. Of course, you will probably want to authenticate this and you probably don\'t want to be adding post via Postman... Stay tuned for when I remember to talk about doing that...'},249:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: Adding authentication to our Express blog with Passport.js\npublished: true\ndescription: Time to make things secure\ntags: javascript,Node, Express, Passport.js,authentication\nthumbnail: https://nicholasgriffin.dev/uploads/bp/2019/March/users_js.jpg\nheader: https://nicholasgriffin.dev/uploads/bp/2019/March/users_js.jpg\nctime: 2019-04-19\n---\n\nIn the last blog post we talked about [adding a blog to our personal site via Node, Express and Mongo](../../../../../../../../post-single?postID=5c7be6e2a1e5fbe51cd94950). In this blog post, we will be expanding upon that by adding authentication to our new Express APIs via something called Passport.js.\n\nWe will be going through the backend side of the code only during this post, creating a set of APIs for creating users, generating tokens for users, logging users in and requiring authentication for our APIs.\n\nLet\'s get started.\n\n## Setting up our app\n\nFor this post, I am going to expect that you have already set up a node environment, and have Mongo set up and ready to go. If you still need to do that, then it might be best to find a tutorial on how to do that before you follow this.\n\nTo start, you\'ll need to make sure that you have the following packages installed and included within your main application file:\n\n<pre>const express = require(\'express\');\nconst path = require(\'path\');\nconst bodyParser = require(\'body-parser\');\nconst session = require(\'express-session\');\nconst cors = require(\'cors\');\nconst mongoose = require(\'mongoose\');\n</pre>\n\nNow you will need to configure Mongose to use global promises and setup Express to use your modules and set up your sessions.\n\n<pre style="color: #000000; background: #ffffff;"><span style="color: #696969;">//Configure mongoose\'s promise to global promise</span>\nmongoose<span style="color: #808030;">.</span>promise <span style="color: #808030;">=</span> <span style="color: #797997;">global</span><span style="color: #808030;">.</span>Promise<span style="color: #800080;">;</span>\n\n<span style="color: #696969;">//Initiate our app</span>\n<span style="color: #800000; font-weight: bold;">const</span> app <span style="color: #808030;">=</span> express<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\n<span style="color: #696969;">//Configure our app</span>\napp<span style="color: #808030;">.</span>use<span style="color: #808030;">(</span>cors<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\napp<span style="color: #808030;">.</span>use<span style="color: #808030;">(</span>require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">morgan</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">dev</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\napp<span style="color: #808030;">.</span>use<span style="color: #808030;">(</span>bodyParser<span style="color: #808030;">.</span>urlencoded<span style="color: #808030;">(</span><span style="color: #800080;">{</span> extended<span style="color: #800080;">:</span> <span style="color: #0f4d75;">false</span> <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\napp<span style="color: #808030;">.</span>use<span style="color: #808030;">(</span>bodyParser<span style="color: #808030;">.</span>json<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\napp<span style="color: #808030;">.</span>use<span style="color: #808030;">(</span>express<span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">static</span><span style="color: #808030;">(</span>path<span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">join</span><span style="color: #808030;">(</span>__dirname<span style="color: #808030;">,</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">public</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\napp<span style="color: #808030;">.</span>use<span style="color: #808030;">(</span>session<span style="color: #808030;">(</span><span style="color: #800080;">{</span> secret<span style="color: #800080;">:</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">my-super-secret-key</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span> cookie<span style="color: #800080;">:</span> <span style="color: #800080;">{</span> maxAge<span style="color: #800080;">:</span> <span style="color: #008c00;">60000</span> <span style="color: #800080;">}</span><span style="color: #808030;">,</span> resave<span style="color: #800080;">:</span> <span style="color: #0f4d75;">false</span><span style="color: #808030;">,</span> saveUninitialized<span style="color: #800080;">:</span> <span style="color: #0f4d75;">false</span> <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n</pre>\n\nMake sure that you change your key to something really secret.\n\n## Storing user data\n\nNow that you have set up and configured your app, you will need to create your model for the Users database that you will need for the next steps.\n\nTo do this, you will need to create a new folder called "models" and then create a file within that folder called "Users.js".\n\nWe will be using this folder to define the schema for our users, hashing user passwords, generating a salt and creating the JWT that we will need latter. This file should look something like this:\n\n<pre style="color: #000000; background: #ffffff;"><span style="color: #800000; font-weight: bold;">const</span> mongoose <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">mongoose</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> crypto <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">crypto</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> jwt <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">jsonwebtoken</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\n<span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800080;">{</span> Schema <span style="color: #800080;">}</span> <span style="color: #808030;">=</span> mongoose<span style="color: #800080;">;</span>\n\n<span style="color: #800000; font-weight: bold;">const</span> UsersSchema <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">new</span> Schema<span style="color: #808030;">(</span><span style="color: #800080;">{</span>\n  email<span style="color: #800080;">:</span> <span style="color: #797997;">String</span><span style="color: #808030;">,</span>\n  hash<span style="color: #800080;">:</span> <span style="color: #797997;">String</span><span style="color: #808030;">,</span>\n  salt<span style="color: #800080;">:</span> <span style="color: #797997;">String</span><span style="color: #808030;">,</span>\n<span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\nUsersSchema<span style="color: #808030;">.</span>methods<span style="color: #808030;">.</span>setPassword <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">function</span><span style="color: #808030;">(</span>password<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n  <span style="color: #800000; font-weight: bold;">this</span><span style="color: #808030;">.</span>salt <span style="color: #808030;">=</span> crypto<span style="color: #808030;">.</span>randomBytes<span style="color: #808030;">(</span><span style="color: #008c00;">16</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">toString</span><span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">hex</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n  <span style="color: #800000; font-weight: bold;">this</span><span style="color: #808030;">.</span>hash <span style="color: #808030;">=</span> crypto<span style="color: #808030;">.</span>pbkdf2Sync<span style="color: #808030;">(</span>password<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">this</span><span style="color: #808030;">.</span>salt<span style="color: #808030;">,</span> <span style="color: #008c00;">10000</span><span style="color: #808030;">,</span> <span style="color: #008c00;">512</span><span style="color: #808030;">,</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">sha512</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">toString</span><span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">hex</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800080;">}</span><span style="color: #800080;">;</span>\n\nUsersSchema<span style="color: #808030;">.</span>methods<span style="color: #808030;">.</span>validatePassword <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">function</span><span style="color: #808030;">(</span>password<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n  <span style="color: #800000; font-weight: bold;">const</span> hash <span style="color: #808030;">=</span> crypto<span style="color: #808030;">.</span>pbkdf2Sync<span style="color: #808030;">(</span>password<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">this</span><span style="color: #808030;">.</span>salt<span style="color: #808030;">,</span> <span style="color: #008c00;">10000</span><span style="color: #808030;">,</span> <span style="color: #008c00;">512</span><span style="color: #808030;">,</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">sha512</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">toString</span><span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">hex</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n  <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #800000; font-weight: bold;">this</span><span style="color: #808030;">.</span>hash <span style="color: #808030;">===</span> hash<span style="color: #800080;">;</span>\n<span style="color: #800080;">}</span><span style="color: #800080;">;</span>\n\nUsersSchema<span style="color: #808030;">.</span>methods<span style="color: #808030;">.</span>generateJWT <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">function</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n  <span style="color: #800000; font-weight: bold;">const</span> today <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">new</span> <span style="color: #797997;">Date</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n  <span style="color: #800000; font-weight: bold;">const</span> expirationDate <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">new</span> <span style="color: #797997;">Date</span><span style="color: #808030;">(</span>today<span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n  expirationDate<span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">setDate</span><span style="color: #808030;">(</span>today<span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">getDate</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">+</span> <span style="color: #008c00;">60</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\n  <span style="color: #800000; font-weight: bold;">return</span> jwt<span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">sign</span><span style="color: #808030;">(</span><span style="color: #800080;">{</span>\n    email<span style="color: #800080;">:</span> <span style="color: #800000; font-weight: bold;">this</span><span style="color: #808030;">.</span>email<span style="color: #808030;">,</span>\n    id<span style="color: #800080;">:</span> <span style="color: #800000; font-weight: bold;">this</span><span style="color: #808030;">.</span>_id<span style="color: #808030;">,</span>\n    <span style="color: #800000; font-weight: bold;">exp</span><span style="color: #800080;">:</span> <span style="color: #800000; font-weight: bold;">parseInt</span><span style="color: #808030;">(</span>expirationDate<span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">getTime</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">/</span> <span style="color: #008c00;">1000</span><span style="color: #808030;">,</span> <span style="color: #008c00;">10</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span>\n  <span style="color: #800080;">}</span><span style="color: #808030;">,</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">secret</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800080;">}</span>\n\nUsersSchema<span style="color: #808030;">.</span>methods<span style="color: #808030;">.</span>toAuthJSON <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">function</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n  <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #800080;">{</span>\n    _id<span style="color: #800080;">:</span> <span style="color: #800000; font-weight: bold;">this</span><span style="color: #808030;">.</span>_id<span style="color: #808030;">,</span>\n    email<span style="color: #800080;">:</span> <span style="color: #800000; font-weight: bold;">this</span><span style="color: #808030;">.</span>email<span style="color: #808030;">,</span>\n    token<span style="color: #800080;">:</span> <span style="color: #800000; font-weight: bold;">this</span><span style="color: #808030;">.</span>generateJWT<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span>\n  <span style="color: #800080;">}</span><span style="color: #800080;">;</span>\n<span style="color: #800080;">}</span><span style="color: #800080;">;</span>\n\nmongoose<span style="color: #808030;">.</span>model<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">Users</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span> UsersSchema<span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n</pre>\n\nTo use this model, you will need to add the following to your application file under the line where you are settiing up Mongo.\n\n<pre>require(\'./models/Users\');</pre>\n\n## Setting up our Passport.js config\n\nNow that we have set up our users model, we are ready to get started with our configuration for Passport.js.\n\nTo do this and keep it tidy we will need to create a new folder called "config", which we will be using for the storage of our configuration files for this part and for future requirements.\n\nWithin this folder, we need to create a new file named "passport.js".\n\n<pre style="color: #000000; background: #ffffff;"><span style="color: #800000; font-weight: bold;">const</span> mongoose <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">mongoose</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> passport <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">passport</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> LocalStrategy <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">passport-local</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\n<span style="color: #800000; font-weight: bold;">const</span> Users <span style="color: #808030;">=</span> mongoose<span style="color: #808030;">.</span>model<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">Users</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\npassport<span style="color: #808030;">.</span>use<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">new</span> LocalStrategy<span style="color: #808030;">(</span><span style="color: #800080;">{</span>\n  usernameField<span style="color: #800080;">:</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">user[email]</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span>\n  passwordField<span style="color: #800080;">:</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">user[password]</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span>\n<span style="color: #800080;">}</span><span style="color: #808030;">,</span> <span style="color: #808030;">(</span>email<span style="color: #808030;">,</span> password<span style="color: #808030;">,</span> done<span style="color: #808030;">)</span> <span style="color: #808030;">=</span><span style="color: #808030;">></span> <span style="color: #800080;">{</span>\n  Users<span style="color: #808030;">.</span>findOne<span style="color: #808030;">(</span><span style="color: #800080;">{</span> email <span style="color: #800080;">}</span><span style="color: #808030;">)</span>\n    <span style="color: #808030;">.</span>then<span style="color: #808030;">(</span><span style="color: #808030;">(</span>user<span style="color: #808030;">)</span> <span style="color: #808030;">=</span><span style="color: #808030;">></span> <span style="color: #800080;">{</span>\n      <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span><span style="color: #808030;">!</span>user <span style="color: #808030;">||</span> <span style="color: #808030;">!</span>user<span style="color: #808030;">.</span>validatePassword<span style="color: #808030;">(</span>password<span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n        <span style="color: #800000; font-weight: bold;">return</span> done<span style="color: #808030;">(</span><span style="color: #0f4d75;">null</span><span style="color: #808030;">,</span> <span style="color: #0f4d75;">false</span><span style="color: #808030;">,</span> <span style="color: #800080;">{</span> errors<span style="color: #800080;">:</span> <span style="color: #800080;">{</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">email or password</span><span style="color: #800000;">\'</span><span style="color: #800080;">:</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">is invalid</span><span style="color: #800000;">\'</span> <span style="color: #800080;">}</span> <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n      <span style="color: #800080;">}</span>\n\n      <span style="color: #800000; font-weight: bold;">return</span> done<span style="color: #808030;">(</span><span style="color: #0f4d75;">null</span><span style="color: #808030;">,</span> user<span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n    <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">catch</span><span style="color: #808030;">(</span>done<span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n</pre>\n\nThis will basically use our password validation function from users to direct the user to the correct output.\n\nTo link this all together, you will need to add the following line after your model set up:\n\n<pre style="color: #000000; background: #ffffff;">require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">./config/passport</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n</pre>\n\n## Setting up our authentication route\n\nThe final step is to set up a route that can be used for authentication.\n\nTo do this, we will create a new folder named "routes" and then within that, we will create a file named "auth.js". This will contain a function for getting a token from the user\'s request headers.\n\nIt does this by looking for a header named authorization and then splitting everything in the value after the word \'Token\', the part that is returned should be our JWT.\n\nIf a JWT cannnot be found it will return null, which we can use to display an error through the API later.\n\n<pre style="color: #000000; background: #ffffff;"><span style="color: #800000; font-weight: bold;">const</span> jwt <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">express-jwt</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\n<span style="color: #800000; font-weight: bold;">const</span> getJWT <span style="color: #808030;">=</span> <span style="color: #808030;">(</span>req<span style="color: #808030;">)</span> <span style="color: #808030;">=</span><span style="color: #808030;">></span> <span style="color: #800080;">{</span>\n  <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800080;">{</span> headers<span style="color: #800080;">:</span> <span style="color: #800080;">{</span> authorization <span style="color: #800080;">}</span> <span style="color: #800080;">}</span> <span style="color: #808030;">=</span> req<span style="color: #800080;">;</span>\n\n  <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span>authorization <span style="color: #808030;">&&</span> authorization<span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">split</span><span style="color: #808030;">(</span><span style="color: #800000;">\'</span> <span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #808030;">[</span><span style="color: #008c00;">0</span><span style="color: #808030;">]</span> <span style="color: #808030;">===</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">Token</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n    <span style="color: #800000; font-weight: bold;">return</span> authorization<span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">split</span><span style="color: #808030;">(</span><span style="color: #800000;">\'</span> <span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #808030;">[</span><span style="color: #008c00;">1</span><span style="color: #808030;">]</span><span style="color: #800080;">;</span>\n  <span style="color: #800080;">}</span>\n  <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #0f4d75;">null</span><span style="color: #800080;">;</span>\n<span style="color: #800080;">}</span><span style="color: #800080;">;</span>\n</pre>\n\nWe then need to create our variable for both required and optional authenticatiion methods and then finally export that variable:\n\n<pre style="color: #000000; background: #ffffff;"><span style="color: #800000; font-weight: bold;">const</span> auth <span style="color: #808030;">=</span> <span style="color: #800080;">{</span>\n  required<span style="color: #800080;">:</span> jwt<span style="color: #808030;">(</span><span style="color: #800080;">{</span>\n    secret<span style="color: #800080;">:</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">secret</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span>\n    userProperty<span style="color: #800080;">:</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">payload</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span>\n    getToken<span style="color: #800080;">:</span> getJWT<span style="color: #808030;">,</span>\n  <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span>\n  optional<span style="color: #800080;">:</span> jwt<span style="color: #808030;">(</span><span style="color: #800080;">{</span>\n    secret<span style="color: #800080;">:</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">secret</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span>\n    userProperty<span style="color: #800080;">:</span> <span style="color: #800000;">\'</span><span style="color: #0000e6;">payload</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span>\n    getToken<span style="color: #800080;">:</span> getJWT<span style="color: #808030;">,</span>\n    credentialsRequired<span style="color: #800080;">:</span> <span style="color: #0f4d75;">false</span><span style="color: #808030;">,</span>\n  <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span>\n<span style="color: #800080;">}</span><span style="color: #800080;">;</span>\n\nmodule<span style="color: #808030;">.</span>exports <span style="color: #808030;">=</span> auth<span style="color: #800080;">;</span>\n</pre>\n\nNow we need to link all of this to an API.\n\nTo do that, create a new file in your routes folder called "index.js" and add the following code to it:\n\n<pre style="color: #000000; background: #ffffff;"><span style="color: #800000; font-weight: bold;">const</span> express <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">express</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> router <span style="color: #808030;">=</span> express<span style="color: #808030;">.</span>Router<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\nrouter<span style="color: #808030;">.</span>use<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">/api</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">./api</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\nmodule<span style="color: #808030;">.</span>exports <span style="color: #808030;">=</span> router<span style="color: #800080;">;</span>\n</pre>\n\nThis will basically set up a new route that will link requests with the api pathname to a folder called api within our routes folder.\n\nCreate that api folder within your routes folder and then create another "index.js" file within that folder with the following:\n\n<pre style="color: #000000; background: #ffffff;"><span style="color: #800000; font-weight: bold;">const</span> express <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">express</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> router <span style="color: #808030;">=</span> express<span style="color: #808030;">.</span>Router<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\nrouter<span style="color: #808030;">.</span>use<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">/users</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">./users</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\nmodule<span style="color: #808030;">.</span>exports <span style="color: #808030;">=</span> router<span style="color: #800080;">;</span>\n</pre>\n\nAnd then, as you might have guessed from the code, we will need to create another file within the api folder called "users.js".\n\nThis is . where you will host your users APIs.\n\n## Creating your Users APIs\n\nTo start off, add the following to the top of your new file:\n\n<pre style="color: #000000; background: #ffffff;"><span style="color: #800000; font-weight: bold;">const</span> mongoose <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">mongoose</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> passport <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">passport</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> router <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">express</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span>Router<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> auth <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">../auth</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> Users <span style="color: #808030;">=</span> mongoose<span style="color: #808030;">.</span>model<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">Users</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n</pre>\n\nYou\'ll then need to add the following after that to register your APIs.\n\n**New user API**\n\n<pre style="color: #000000; background: #ffffff;">router<span style="color: #808030;">.</span>post<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">/</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span> auth<span style="color: #808030;">.</span>optional<span style="color: #808030;">,</span> <span style="color: #808030;">(</span>req<span style="color: #808030;">,</span> res<span style="color: #808030;">,</span> next<span style="color: #808030;">)</span> <span style="color: #808030;">=</span><span style="color: #808030;">></span> <span style="color: #800080;">{</span>\n  <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800080;">{</span> body<span style="color: #800080;">:</span> <span style="color: #800080;">{</span> user <span style="color: #800080;">}</span> <span style="color: #800080;">}</span> <span style="color: #808030;">=</span> req<span style="color: #800080;">;</span>\n\n  <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span><span style="color: #808030;">!</span>user<span style="color: #808030;">.</span>email<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n    <span style="color: #800000; font-weight: bold;">return</span> res<span style="color: #808030;">.</span>status<span style="color: #808030;">(</span><span style="color: #008c00;">422</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span>send<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">Something unexpected happened</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n  <span style="color: #800080;">}</span>\n\n  <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span><span style="color: #808030;">!</span>user<span style="color: #808030;">.</span>password<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n    <span style="color: #800000; font-weight: bold;">return</span> res<span style="color: #808030;">.</span>status<span style="color: #808030;">(</span><span style="color: #008c00;">422</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span>send<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">Something unexpected happened</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n  <span style="color: #800080;">}</span>\n\n  <span style="color: #800000; font-weight: bold;">const</span> returnedUser <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">new</span> Users<span style="color: #808030;">(</span>user<span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\n  returnedUser<span style="color: #808030;">.</span>setPassword<span style="color: #808030;">(</span>user<span style="color: #808030;">.</span>password<span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\n  <span style="color: #800000; font-weight: bold;">return</span> returnedUser<span style="color: #808030;">.</span>save<span style="color: #808030;">(</span><span style="color: #808030;">)</span>\n    <span style="color: #808030;">.</span>then<span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">=</span><span style="color: #808030;">></span> res<span style="color: #808030;">.</span>json<span style="color: #808030;">(</span><span style="color: #800080;">{</span> user<span style="color: #800080;">:</span> returnedUser<span style="color: #808030;">.</span>toAuthJSON<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n</pre>\n\n**Login API**\n\n<pre style="color: #000000; background: #ffffff;">router<span style="color: #808030;">.</span>post<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">/login</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span> auth<span style="color: #808030;">.</span>optional<span style="color: #808030;">,</span> <span style="color: #808030;">(</span>req<span style="color: #808030;">,</span> res<span style="color: #808030;">,</span> next<span style="color: #808030;">)</span> <span style="color: #808030;">=</span><span style="color: #808030;">></span> <span style="color: #800080;">{</span>\n  <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800080;">{</span> body<span style="color: #800080;">:</span> <span style="color: #800080;">{</span> user <span style="color: #800080;">}</span> <span style="color: #800080;">}</span> <span style="color: #808030;">=</span> req<span style="color: #800080;">;</span>\n\n  <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span><span style="color: #808030;">!</span>user<span style="color: #808030;">.</span>email<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n    <span style="color: #800000; font-weight: bold;">return</span> res<span style="color: #808030;">.</span>status<span style="color: #808030;">(</span><span style="color: #008c00;">422</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n  <span style="color: #800080;">}</span>\n\n  <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span><span style="color: #808030;">!</span>user<span style="color: #808030;">.</span>password<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n    <span style="color: #800000; font-weight: bold;">return</span> res<span style="color: #808030;">.</span>status<span style="color: #808030;">(</span><span style="color: #008c00;">422</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n  <span style="color: #800080;">}</span>\n\n  <span style="color: #800000; font-weight: bold;">return</span> passport<span style="color: #808030;">.</span>authenticate<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">local</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span> <span style="color: #800080;">{</span> session<span style="color: #800080;">:</span> <span style="color: #0f4d75;">false</span> <span style="color: #800080;">}</span><span style="color: #808030;">,</span> <span style="color: #808030;">(</span>err<span style="color: #808030;">,</span> passportUser<span style="color: #808030;">,</span> info<span style="color: #808030;">)</span> <span style="color: #808030;">=</span><span style="color: #808030;">></span> <span style="color: #800080;">{</span>\n    <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span>err<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n      <span style="color: #800000; font-weight: bold;">return</span> next<span style="color: #808030;">(</span>err<span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n    <span style="color: #800080;">}</span>\n\n    <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span>passportUser<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n      <span style="color: #800000; font-weight: bold;">const</span> user <span style="color: #808030;">=</span> passportUser<span style="color: #800080;">;</span>\n      user<span style="color: #808030;">.</span>token <span style="color: #808030;">=</span> passportUser<span style="color: #808030;">.</span>generateJWT<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\n      <span style="color: #800000; font-weight: bold;">return</span> res<span style="color: #808030;">.</span>json<span style="color: #808030;">(</span><span style="color: #800080;">{</span> user<span style="color: #800080;">:</span> user<span style="color: #808030;">.</span>toAuthJSON<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n    <span style="color: #800080;">}</span>\n\n    <span style="color: #800000; font-weight: bold;">return</span> status<span style="color: #808030;">(</span><span style="color: #008c00;">400</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span>info<span style="color: #800080;">;</span>\n  <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>req<span style="color: #808030;">,</span> res<span style="color: #808030;">,</span> next<span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n</pre>\n\n## Adding authentication to our APIs\n\nNow you are ready to add authentication to your APIs! Here\'s an example with the addpost API that I talked about in the last post about creating a blog within Mongo:\n\n<pre style="color: #000000; background: #ffffff;"><span style="color: #800000; font-weight: bold;">const</span> mongoose <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">mongoose</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> passport <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">passport</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> router <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">express</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span>Router<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> auth <span style="color: #808030;">=</span> require<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">../auth</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> Users <span style="color: #808030;">=</span> mongoose<span style="color: #808030;">.</span>model<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">Users</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800000; font-weight: bold;">const</span> Post <span style="color: #808030;">=</span> mongoose<span style="color: #808030;">.</span>model<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">Post</span><span style="color: #800000;">\'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n\n<span style="color: #696969;">// For creating posts</span>\nrouter<span style="color: #808030;">.</span>post<span style="color: #808030;">(</span><span style="color: #800000;">\'</span><span style="color: #0000e6;">/addpost</span><span style="color: #800000;">\'</span><span style="color: #808030;">,</span> auth<span style="color: #808030;">.</span>required<span style="color: #808030;">,</span> <span style="color: #808030;">(</span>req<span style="color: #808030;">,</span> res<span style="color: #808030;">)</span> <span style="color: #808030;">=</span><span style="color: #808030;">></span> <span style="color: #800080;">{</span>\n  <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800080;">{</span> payload<span style="color: #800080;">:</span> <span style="color: #800080;">{</span> id <span style="color: #800080;">}</span> <span style="color: #800080;">}</span> <span style="color: #808030;">=</span> req<span style="color: #800080;">;</span>\n\n  <span style="color: #800000; font-weight: bold;">return</span> Users<span style="color: #808030;">.</span>findById<span style="color: #808030;">(</span>id<span style="color: #808030;">)</span>\n    <span style="color: #808030;">.</span>then<span style="color: #808030;">(</span><span style="color: #808030;">(</span>user<span style="color: #808030;">)</span> <span style="color: #808030;">=</span><span style="color: #808030;">></span> <span style="color: #800080;">{</span>\n      <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span><span style="color: #808030;">!</span>user<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>\n        <span style="color: #800000; font-weight: bold;">return</span> res<span style="color: #808030;">.</span>sendStatus<span style="color: #808030;">(</span><span style="color: #008c00;">400</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n      <span style="color: #800080;">}</span>\n\n      <span style="color: #800000; font-weight: bold;">var</span> postData <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">new</span> Post<span style="color: #808030;">(</span>req<span style="color: #808030;">.</span>body<span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n      postData<span style="color: #808030;">.</span>save<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span>then<span style="color: #808030;">(</span>result <span style="color: #808030;">=</span><span style="color: #808030;">></span> <span style="color: #800080;">{</span>\n        res<span style="color: #808030;">.</span>status<span style="color: #808030;">(</span><span style="color: #008c00;">200</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span>send<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">Post saved.</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n      <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">catch</span><span style="color: #808030;">(</span>err <span style="color: #808030;">=</span><span style="color: #808030;">></span> <span style="color: #800080;">{</span>\n        res<span style="color: #808030;">.</span>status<span style="color: #808030;">(</span><span style="color: #008c00;">400</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span>send<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">Unable to save data</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n      <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n    <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n<span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>\n</pre>\n\n## And that\'s it!\n\nYou have now successfully added authentication to your Node Express setup. Next up is creating a full frontend system with a login and dashboard page for our blog\n\n![](https://media.giphy.com/media/bWS1Vh9mVkcZq/giphy.gif)'},250:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: My weekend with AWS DeepRacer\npublished: true\ndescription: Here are the results of my weekend playing around with AWS DeepRacer\ntags: javascript,AWS, AWS DeepRacer, Machine Learning\nthumbnail: https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+12.19.03.png\nheader: https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+12.19.03.png\nctime: 2019-05-19\n---\n\nLast weekend marked the beginning of Amazon's new virtual DeepRacer league, which is basically a race that is conducted within Amazon's platform by a bunch of simulated versions of the  DeepRacer vehicle.\n\nDevelopers battle it out in this league not by their driving skill but by their knowledge of the AWS platform and their ability to effectively create and train a DeepRacer model on AWS' platform.  As you can tell by the title, this was immediately something that I thought I would be interested in, if not at least just for the weekend and I'd have to say that I definitely had fun doing it.\n\n## Getting Started\n\nThe whole process of getting started with AWS DeepRacer and concept of Reinforcement Learning is a slightly scary one at first sight, this is something that you've probably never done before and at times, Amazon's slightly jarring interface can be a little confusing.\n\nThankfully, it isn't actually that hard to do. Simply head on over to the [AWS DeepRacer](https://console.aws.amazon.com/deepracer/) page in your console and hit the orange 'Get Started' button,  that will take you to another page where you need to click another button in order to create the resources required.\n\n![](https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+12.28.57.png)\n\nThere's also a link to a document about learning RL on this page that you should definitely check out.\n\nOnce you've done all that, you are ready to start making some models and get spending some money and yes, you will have to spend a bit of money, DeepRacer is definitely not for the light of wallet, more on that later.\n\n## Creating a DeepRacer model\n\nSo probably the hardest part of this journey with DeepRacer was the creation of RL models for use with the simulation, while the actual creation  of the models simply  involves some Python code that you can create in pretty much any IDE, getting a model correct can be a lot of trial and error and a lot of the time,  you will  end up with an error.\n\nSadly, a lot of your success will also be linked to the training settings that you select for your DeepRacer model and while you can do  a lot with your own code, sometimes you might end up having to scrap all of the training that you have conducted in order to slightly change a  setting with a value that is more than likely  to be an utter  guess.\n\nThen you'll likely have to do at least an hour or two of training before you can get racing.\n\nThat said, I  can't say that I  didn't find the experience enjoyable, nor that I didn't learn anything from, nor that I didn't have any fun. \n\n![](https://cdn.nicholasgriffin.dev/images/aawsdeeprace.gif)\n\nAs  you can see from the GIF above, there are a lot of options, but it actually isn't that hard to get one going fast.\n\nIn total, I created 19 models over the weekend, and each one gradually started to get a little better, somewhat smarter and a lot faster.\n\nAt the start, I decided to use one of Amazon's templates to see how everything worked and to get a quick glimpse into what I could expect, so i used the following function, which is designed to train to car to keep within the two borders and hopefully on the center linne.\n\n```python\n    def reward_function(params):     \n    '''     \n    Example of rewarding the agent to follow center line     \n    '''          \n    # Read input parameters     \n    track_width = params['track_width']     \n    distance_from_center = params['distance_from_center']          \n    # Calculate 3 markers that are at varying distances away from the center line     \n    marker_1 = 0.1 * track_width     \n    marker_2 = 0.25 * track_width     \n    marker_3 = 0.5 * track_width          \n    # Give higher reward if the car is closer to center line and vice versa     \n    if distance_from_center <= marker_1:\n    reward = 1.0     \n    elif distance_from_center <= marker_2:\n    reward = 0.5     \n    elif distance_from_center <= marker_3:\n    reward = 0.1     \n    else:         \n    reward = 1e-3  # likely crashed/ close to off track          \n    return float(reward)\n```\n\nAs you can see it is actually quite simple but involves quite a lot of math. The premise is that the more that your car does what you want it to, the more reward value you provide. if it does something that you don't want itt to, you take the reward away.\n\nSo in this example, the car will get the highest reward if it is closer to the center line.\n\nFor this first one, I did only that and then used the default settings.\n\n![](https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+13.04.21.png)\n\nThe great thing about DeepRacer is that you can actually watch a live stream of your model training in the simulation while it is doing so. This means that you can quickly see where you could make optimisations to your model and what optimisations you should probably tone down.\n\nShould your model look like it's not panning out, you can also quickly stoop the training and save some money.\n\nOnce my model had finished, I worked out that although it was occasionally steering to the center for those points, it was not staying there for a long period of time and even sometimes going off the track.\n\nThankfully, Amazon has already set up a range of parameters that will allow you to customise your reward function  and get the most out of it.\n\n```python\n    {     \n        \"all_wheels_on_track\": Boolean,    \n        # flag to indicate if the vehicle is on the track     \n        \"x\": float,                        \n        # vehicle's x-coordinate in meters     \n        \"y\": float,                        \n        # vehicle's y-coordinate in meters     \n        \"distance_from_center\": float,     \n        # distance in meters from the track center      \n        \"is_left_of_center\": Boolean,      \n        # Flag to indicate if the vehicle is on the left side to the track center or not.      \n        \"heading\": float,                  \n        # vehicle's yaw in degrees     \n        \"progress\": float,                 \n        # percentage of track completed     \n        \"steps\": int,                      \n        # number steps completed     \n        \"speed\": float,                    \n        # vehicle's speed in meters per second (m/s)     \n        \"steering_angle\": float,          \n        # vehicle's steering angle in degrees     \n        \"track_width\": float,              \n        # width of the track     \n        \"waypoints\": [[float, float], … ], \n        # list of [x,y] as milestones along the track center     \n        \"closest_waypoints\": [int, int]    \n        # indices of the two nearest waypoints. \n    }\n```\n\nSo what I did was combine the default with a multiplier for the car's progress while being in the center of the track.\n\n```python\n     Give higher reward if the car is closer to center line and vice versa     \n     if distance_from_center <= marker_1:         \n        reward = 1.0 * progress     \n     elif distance_from_center <= marker_2:         \n        reward = 0.5     \n    elif distance_from_center <= marker_3:         \n        reward = 0.1     \n    else:         \n        reward = 1e-3  # likely crashed/ close to off track\n```\n\nI also wanted it to go faster, while not steering to much so I added the following:\n\n```python\n        # Add penalty if throttle exsides the steering else add reward     \n        if abs(steering_angle) > 15 and abs(steering_angle > throttle):         \n            reward *= 1 - (steering_angle - throttle)     \n        else:         \n            reward *= 1 + throttle\n```\n\nAnd then I had to increase the speed on the action parameters as well, this is the part where you have more risk in changing your parameters, as you can't change the parameters on a cloned model, only a new one and once you create a new model, you lose all of your progress and training, but keeping the defaults will definitely mean that you will not be able to progress through the league as much.\n\nYou can also play around with the HyperParameters to optimise your training, however, this is again a bit of trail and error.\n\nFor me, once I did that, I was able to get a good training session from my model and finally submitted my first decent score of 28:350 o the London Loop, which at the time put me at rank 145.\n\nI then trained the model further and decreased that time too 25.932 at rank 115.\n\nI was pretty happy at that point and I've left it there, gradually decreasing down to 155 between the time of me returning to my real job and writing this post.\n\n![](https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+13.28.03.png)\n\nUltimately, for me, the whole process of creating code, testing it, reiterating it and then finally succeeding at a goal was great. As developers, we are often doing the same project month after month, not really moving between extremely different technologies and generally staying within the same lane that we started on.\n\nFor me, side-projects like creating a DeepRacer model over the weekend is a lot of fun, and although all  I really did was spend $70 on a simulation of a race for the achievement of a virtual score within a virtual league, I think I learned a lot from doing it.\n\n## And that's it\n\nTime to get testing!\n\n![](https://media.giphy.com/media/6mGzvKGJGsYH6/giphy.gif)"},251:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: Adding Service Worker to my site\npublished: true\ndescription: Whoops! I forgot to add Service Worker to my site. Probably about time to do that...\ntags: javascript,service worker\nthumbnail: https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+20.24.38.png\nheader: https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+20.24.38.png\nctime: 2019-05-19\n---\n\nService Workers have been around for quite a  while now and are awesome little JavaScript that can change the value that your site provides from behind something tethered to a mobile connection to a fully fledged progressive web app, ready for consumption on the mobile web, wherever your users are.\n\nI remember being one of the first people I saw integrating them on sites back when I was  managing my technology blog, TechNNutty, allowing me to dramatically reduce the loading  time of that site without having the spend more money than I had to, for that reason alone, Service Workers are a no brainer for any website, top that with the ability to save content for offline consumption, send push notifications and more and you have the solution for modern websites, without any integration mess.\n\nSo if you haven\'t already, I would definitely advice following through this and getting set up with your own Service Worker set up.\n\n## Before we begin\n\nBefore you  start building a Service Worker, you should definitely read up on the topic from various sources, they\'ll know and explain it a lot better than me. [Google has some great articles and posts about all things Service Worker](https://developers.google.com/web/fundamentals/primers/service-workers/).\n\nYou should also note that Service Worker is bound to a particular scope, that means it can only be installed and can only control a singular domain, usually your main root domain so you may want to think about your application structure before getting placing code.\n\nThat last part also means that you need access to your websites, root directory. You also cannot host a Service Worker on a CDN.\n\nThat\'s still not all.\n\nYou also need to be using HTTPS across your site (You will be able to load it on localhost on Chrome for dev) and you should note that Service Worker is currently only supported on selected browsers Jake Archibald\'s [is Serviceworker ready](https://jakearchibald.github.io/isserviceworkerready/) site is a great place to check the status of support for various Service Worker related features.\n\n## Getting your app to register a Service Worker\n\nThanks to the browser\'s implementation of the Service Worker spec, it\'s actually really easy to get started and  register a Service Worker, so before we actually create any code, that will be the first part that we will complete.\n\nHere\'s the code that I\'m using on  this  site:\n\n```javascript\nwindow.addEventListener("DOMContentLoaded", function (event) {\n    // Load the service worker         \n    if (\'serviceWorker\' in navigator) { \n        navigator.serviceWorker.register(\'/serviceworker.js\', { scope: \'/\'})            .then( function( registration) {\n                console.log(`Service Worker successfully registered for`, registration.scope);\n            })\n            .catch( function( error ) {\n                console.log(`ServiceWorker not registered: ${error}`);\n            });\n        if(navigator.serviceWorker.controller) {\n            window.addEventListener(\'load\', function() {\n                navigator.serviceWorker.controller.postMessage({\'command\': \'trimCaches\'});\n            })\n        }\n    }\n});\n```\n\nBasically, this waits for the DOM to lo load, checks for Service Worker support and then installs SW if it is supported.\n\nThe part that actually installs the script is the following line:\n\n```javascript\n    navigator.serviceWorker.register(\'/serviceworker.js\', { scope: \'/\'});\n```\n\nThis basically says what the path to the file is and the scope that Service Worker should use.\n\nAs you can see, this also use promises, so you can also throw in some validation checking and reporting.\n\nI\'ve also added a postMessage for trimming the cache, which we will get to later.\n\n## Installing your Service Worker\n\nNow it is time to get started on the creation of your Service Worker file, for this I am naming my file \'serviceworker.js\' but you can call it whatever you like.\n\nAt the start of the file, you should add some global variables to make your life easier further down the line. My globals look like this:\n\n```javascript\n    // The names for our caches and the version number \n    const version = "-v1.0.5"; \n    const staticCache = "cachedFiles" + version; \n    const pagesCache = "cachedPages"; \n    const imagesCache = "cachedImages"; \n    const cacheList = [staticCache, pagesCache, imagesCache];  \n    // Our list of paths to cache on install \n    const pagesToCache = ["/", "/offline"];  \n    // Static files to cache on install \n    const staticsToCache = [   "static/js/typed.min.js",   "static/js/nghpjs.js",   "static/js/lazyload.min.js" ];\n```\n\nThey are all pretty self-explanatory, but what I am basically doing here is naming our caches and setting what files should be cached on install. If you are creating an offline-ready PWA, you should include an offline page here as well that displays some sort of message to your offline users.\n\nMine\'s pretty simplistic:\n\n![](https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+20.56.30.png)\n\nI also added the following function that stores the  files so I don\'t have to repeat myself a lot:\n\n```javascript\n    // The names for our caches and the version number \n    const version = "-v1.0.5"; \n    const staticCache = "cachedFiles" + version; \n    const pagesCache = "cachedPages"; \n    const imagesCache = "cachedImages"; \n    const cacheList = [staticCache, pagesCache, imagesCache];  \n    // Our list of paths to cache on install \n    const pagesToCache = ["/", "/offline"];  \n    // Static files to cache on install \n    const staticsToCache = [   "static/js/typed.min.js",   "static/js/nghpjs.js",   "static/js/lazyload.min.js" ];\n```\n\nFrom here, the install event is as easy as the following:\n\n```javascript\n    // Install event will trigger when first initated \n    addEventListener("install", installEvent => {   skipWaiting();   \n        // tell the browser to delay the SW installation until cache is populated   \n        installEvent.waitUntil(     \n            // now populate the cache (cache the files) using the Cache API     \n            // 1\\. Open the cache     \n            caches.open(staticCache).then(staticCache => {       \n                // Cache pages       \n                caches.open(pagesCache).then(pagesCache => {         \n                    pagesCache.addAll(pagesToCache);       \n                });        \n                return staticCache.addAll(staticsToCache);     \n            })   \n        ); \n    });\n```\n\nThis simply listens for the install event and then adds all of the base files to our cache.\n\nThe \'skipWaiting()\' callback is optional here, it basically forces the waiting service worker to become the active service worker right away.\n\n## Caching and returning requests from Service Worker\n\nAs Service Worker pretty much controls your network requests, you\'ll also need to set up a fetch event, this will tell Service  Worker what to cache and how to respond to requests.\n\nYou can do this as simply as the following:\n\n```javascript\n    self.addEventListener(\'fetch\', function(event) {   \n        event.respondWith(     \n            caches.match(event.request)       \n            .then(function(response) {         \n                // Cache hit - return response         \n                if (response) {           \n                    return response;         \n                }          \n                return fetch(event.request).then(           \n                    function(response) {             \n                        // Check if we received a valid response             \n                        if(!response || response.status !== 200 || response.type !== \'basic\') {               \n                            return response;             \n                        }              \n                        // IMPORTANT: Clone the response. A response is a stream      // and because we want the browser to consume the response    // as well as the cache consuming the response, we need       // to clone it so we have two streams.             \n                        var responseToCache = response.clone();              caches.open(CACHE_NAME)               \n                        .then(function(cache) {                 \n                            cache.put(event.request, responseToCache);               \n                        });              \n                        return response;           \n                    }         \n                );       \n            })     \n        ); \n    });\n```\n\nThat example is from [Google\'s post](https://developers.google.com/web/fundamentals/primers/service-workers/), for my own site, I  took things a little further than that as I wanted to separate caches and how they were handled.\n\n```javascript\n    // trigger this event when a path is requested \n    addEventListener("fetch", fetchEvent => {   \n        const request = fetchEvent.request;    \n        // Check if the request URL is from us, otherwise ignore it   \n        if (     request.url.indexOf("https://nicholasgriffin.dev") ||     request.url.indexOf("http://localhost:8080")   ) {\n```\n\nTo start, I added an indexOf to check if the requested  URL was from my own domain, as I don\'t want to cache other resources (this can break your site pretty easily), later down the line, I could expand this to add third-party caching for resources that I know work with Service Worker, like my CDN for example, for know I am simply ignoring other domains.\n\nI then split my  caching into three sections.\n\n**HTML Resources**\n\n```javascript\n    if (request.headers.get("Accept").includes("text/html")) {       \n        // respons with this if a page       \n        fetchEvent.respondWith(         \n            fetch(request)           \n            .then(responseFromFetch => {             \n                const copy = responseFromFetch.clone();              \n                fetchEvent.waitUntil(               \n                    caches.open(pagesCache).then(pagesCache => {                 \n                        pagesCache.put(request, copy);               \n                    })             \n                );              \n                return responseFromFetch;           \n            })           \n            // If the response errors           \n            .catch(error => {             \n                return caches.match(request).then(responseFromCache => {\n                    if (responseFromCache) {                 \n                        return responseFromCache;               \n                    }                \n                    // serve offlie page               \n                    return caches.match("/offline");             \n                });           \n            })       \n        );        \n        return;     \n    }\n```\n\n**Image Resources**\n\n```javascript\n    // Check if the request is for an image     \n    if (request.headers.get("Accept").includes("image")) {       \n        fetchEvent.respondWith(         \n            caches.match(request).then(responseFromCache => {           \n                // If the image is already in the cache, return it           \n                if (responseFromCache) {             \n                    fetchEvent.waitUntil(stashInCache(request, imagesCache));\n                    return responseFromCache;           \n                } else {             \n                    return (               \n                        fetch(request)                 \n                        .then(responseFromFetch => {                   \n                            const copy = responseFromFetch.clone();\n                            fetchEvent.waitUntil(                     \n                                caches.open(imagesCache).then(imageCache => {\n                                    imageCache.put(request, copy);\n                                })                   \n                            );                   \n                            return responseFromFetch;                 \n                        })                 \n                        // If the response errors                 \n                        .catch(error => {                   \n                            return caches.match("/offline.png");                 \n                        })             \n                    );           \n                }         \n            })       \n        );        \n        return;    \n    }\n```\n\n**Everything else**\n\n```javascript\n    // for everything else     \n    fetchEvent.respondWith(       \n        caches.match(request).then(responseFromCache => {         \n            fetchEvent.waitUntil(           \n                fetch(request).then(responseFromFetch => {             \n                    caches.open(pagesCache).then(pagesCache => {               \n                        return pagesCache.put(request, responseFromFetch);\n                    });           \n                })         \n            );         \n            return responseFromCache;       \n        })     \n    );\n```\n\nAnd from that point, you\'ll have a pretty mean Service Worker. But there is a bit more that  you can do.\n\n## Updating the Service Worker\n\nOne pretty important task is to add an \'activate\' event listener. This is important as it will allow you to clear out any old cache files.\n\nI\'m doing that will the following:\n\n```javascript\n    addEventListener("activate", activateEvent => {\n  activateEvent.waitUntil(\n    // Clean up caches and clear old ones on activate\n    caches\n      .keys()\n      .then(cacheNames => {\n        return Promise.all(\n          cacheNames.map(cacheName => {\n            if (!cacheList.includes(cacheName)) {\n              return caches.delete(cacheName);\n            }\n          })\n        );\n      })\n      .then(() => {\n        return clients.claim();\n      })\n  );\n});\n```\n\nI also have the following function for trimming the cache on every page load so that it doesn\'t load to much on my user\'s machines.\n\nThis is done with  the following via the PostMessage that I mentioned earlier, limiting the pagesCache and imagesCache to 30:\n\n```javascript\nfunction trimCache(cacheName, maxItems) {\n  caches.open(cacheName).then(cache => {\n    cache.keys().then(keys => {\n      if (keys.length > maxItems) {\n        cache.delete(keys[0]).then(trimCache(cacheName, maxItems));\n      }\n    });\n  });\n}\n```\n\nI don\'t include the staticCache in this as I pretty much always want those resources cached.\n\n## And that\'s it\n\nPretty easy right?\n\nIf you\'d like to see my complete code and don\'t fancy taking a look through Developer Tools, [I\'ve uploaded it to my Github here](https://github.com/nicholasgriffintn/NG_Website_SW).\n\nWhen even a tractor can be fast, your site should be, no question.\n\n![](https://media.giphy.com/media/pZEwBYdHdN2s8/giphy.gif)\n'},252:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: Using Sentiment Analysis to test user interaction\npublished: true\ndescription: Using AWS Comprehend to perform Sentiment Analysis on comments.\ntags: javascript,AWS, AWS Comprehend, Machine Learning\nthumbnail: https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-20+at+01.08.17.png\nheader: https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-20+at+01.08.17.png\nctime: 2019-05-20\n---\n\nSo recently I attended the AWS Summit in London. There was a ton of new stuff to see at the show but alongside the DeepRacer demos, there was a clear focus on machine learning. Amazon has a ton of new machine learning tech to play with and I obviously want to take them up on that.\n\nTo kick things off, I wanted to see what I could do with their comprehend and recognition APIs as this seemed the most useful for the sort of work I do, in particular with user interaction.\n\nOne thing that I thought that would work really I particular would be a comments section, so that's what I'm going to make today, a comments system that points out when a user might be writing something that might be offensive.\n\n## How are we going to do that?\n\nThere are a few places that you could go to for APIs that can do sentiment analysis, however, as I do prefer AWS, we will be using AWS Comprehend.\n\nI like this API not only because I like AWS but also because it integrates well with AWS and is really simple to set up.\n\nObviously, in order to get started, you are going to need an AWS account and a credit/debit card behind it. That said, AWS Comprehend is actually pretty cheap and you only pay for what you use, on the free tier you'll get 50K units of text or 5M characters for free to use for the APIs included within Comprehend, starting from your first request, aside from the custom Classification and Custom Entities APIs.\n\nYou can [view the rest of the pricing here](https://aws.amazon.com/comprehend/pricing/).\n\nAlongside that, we will be setting up an API Gateway and a Lambda. To generate those I'll be using the [Serverless Framework](https://serverless.com/) because that's a lot more fun.\n\n## Setting up our Serverless environment\n\nGetting started with Serverless is really simple, just run the command 'npm install serverless -g' in your terminal window.\n\nOnce that's done, you can create a base project with 'serverless create --template aws-python3 --name comments-comprehend' and then deploy it with 'serverless deploy' (after adding your AWS keys). You should find two files after generating your template, a handler.py file for your lambda code and a serverless.yaml file for your serverless config. \n\nSimply change the names and values in both for what you're creating.\n\nYou'll also want to add the following to your provider config so that the iAM user created can access Comprehend, I have left this a wildcard, you should segment it down for application security.\n\n```yaml\niamRoleStatements: \n- Effect: Allow Action: \n- logs:CreateLogGroup \n- logs:CreateLogStream \n- logs:PutLogEvents \n- comprehend:DetectDominantLanguage \n- comprehend:DetectSentiment \nResource: \"*\"\n```\n\nAnd that's the first part of the serverless framework stuff done.\n\n## Configuring your Lambda  function\n\nNow you want to head over to your handler.py file and start editing.\n\nFirst add in the required imports:\n\n```python\n    import os, boto3, json\n```\n\nThen we are going to add a bit of code to show a message depending on the sentiment, one for negative comments and one for positive.\n\n```python\n    NEGATIVE_COMMENT_MESSAGE=\"Your comment is too negative to post, please edit it.\"\n    \n    POSITIVE_COMMENT_MESSAGE=\"Your comment looks great. Keep up the good work!\"\n    \n    client=boto3.client('comprehend')\n    \n    def sentimentAnalysis(event, context): \n        inputTranscriptData=event['queryStringParameters']['inputTranscript'] \n        \n        print(inputTranscriptData); \n        \n        sentiment=client.detect_sentiment(Text=inputTranscriptData,LanguageCode='en')['Sentiment'] \n        \n        if sentiment=='NEGATIVE': \n            return{\n                \"statusCode\": 200, \n                \"body\": json.dumps(NEGATIVE_COMMENT_MESSAGE)\n            } \n        else: \n            return{\n                \"statusCode\": 200, \n                \"body\": json.dumps(POSITIVE_COMMENT_MESSAGE)\n            }\n```\n\nThat's obviously pretty simplistic, however, that might be just about all we need, we can expand it later.\n\nNow you are ready to deploy that by running 'Serverless Deploy'.\n\n## Testing your function\n\nOnce pushed, you can test your function from within the  AWS Management Console with the following test or something  similar:\n\n```json\n    {\n        \"queryStringParameters\":{\n            \"inputTranscript\": \"I love flowers\"\n        }\n    }\n```\n\nFeel to change it to see what you get back.\n\n## Setting up API Gateway\n\nThis should already be done for you by Serverless, you may want to  add some authentication,  if you don't you can carry on, simply query your API Gateway domain with a query string of the text that you want to validate against, like the following:\n\nhttps://47477fgdhd.execute-api.eu-west-1.amazonaws.com/dev/sentiment-analysis?inputTranscript=I Love Flowers\n\nIt should return a 200 response alongside your text if you did everything right.\n\n## Linking everything together\n\nNow you just need to link the API Gateway to your front end. I built a simple front end form that show the validate message upon submit.\n\nYou can check that out alongside the rest of the code on my [Github](https://github.com/nicholasgriffintn/comments-comprehend). And if you are really interested, keep it bookmarked, I'll be updating it soon.\n"},253:function(e,n,t){e.exports=t(254)},254:function(e,n,t){"use strict";t.r(n),function(e){t(82),t(48),t(49);var n=t(19),o=(t(32),t(264),t(6)),r=(t(69),t(93),t(29),t(22),t(97),t(39),t(96),t(268),t(280),t(282),t(2)),l=t(237),c=t(76),d=t(1),h=t(23),y=t(60);r.a.component(y.a.name,y.a),r.a.component("NLink",y.a),e.fetch||(e.fetch=l.a);var f,m,w=[],v=window.__NUXT__||{};Object.assign(r.a.config,{silent:!0,performance:!1});var x=r.a.config.errorHandler||console.error;function k(e,n,t){var o=function(component){var e=function(component,e){if(!component||!component.options||!component.options[e])return{};var option=component.options[e];if("function"==typeof option){for(var n=arguments.length,t=new Array(n>2?n-2:0),o=2;o<n;o++)t[o-2]=arguments[o];return option.apply(void 0,t)}return option}(component,"transition",n,t)||{};return"string"==typeof e?{name:e}:e};return e.map(function(e){var n=Object.assign({},o(e));if(t&&t.matched.length&&t.matched[0].components.default){var r=o(t.matched[0].components.default);Object.keys(r).filter(function(e){return r[e]&&e.toLowerCase().includes("leave")}).forEach(function(e){n[e]=r[e]})}return n})}function j(e,n,t){return _.apply(this,arguments)}function _(){return(_=Object(o.a)(regeneratorRuntime.mark(function e(n,t,o){var r,l,c,h,y=this;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return this._pathChanged=!!f.nuxt.err||t.path!==n.path,this._queryChanged=JSON.stringify(n.query)!==JSON.stringify(t.query),this._diffQuery=this._queryChanged?Object(d.g)(n.query,t.query):[],this._pathChanged&&this.$loading.start&&!this.$loading.manual&&this.$loading.start(),e.prev=4,e.next=7,Object(d.n)(n);case 7:r=e.sent,!this._pathChanged&&this._queryChanged&&r.some(function(e){var n=e.options.watchQuery;return!0===n||!!Array.isArray(n)&&n.some(function(e){return y._diffQuery[e]})})&&this.$loading.start&&!this.$loading.manual&&this.$loading.start(),o(),e.next=23;break;case 12:if(e.prev=12,e.t0=e.catch(4),l=e.t0||{},c=l.statusCode||l.status||l.response&&l.response.status||500,h=l.message||"",!/^Loading( CSS)? chunk (\d)+ failed\./.test(h)){e.next=20;break}return window.location.reload(!0),e.abrupt("return");case 20:this.error({statusCode:c,message:h}),this.$nuxt.$emit("routeChanged",n,t,l),o();case 23:case"end":return e.stop()}},e,this,[[4,12]])}))).apply(this,arguments)}function S(e,n){return v.serverRendered&&n&&Object(d.a)(e,n),e._Ctor=e,e}function C(e){var path=Object(d.d)(e.options.base,e.options.mode);return Object(d.c)(e.match(path),function(){var e=Object(o.a)(regeneratorRuntime.mark(function e(n,t,o,r,l){var c;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if("function"!=typeof n||n.options){e.next=4;break}return e.next=3,n();case 3:n=e.sent;case 4:return c=S(Object(d.o)(n),v.data?v.data[l]:null),o.components[r]=c,e.abrupt("return",c);case 7:case"end":return e.stop()}},e)}));return function(n,t,o,r,l){return e.apply(this,arguments)}}())}function T(e,n,t){var o=this,r=[],l=!1;if(void 0!==t&&(r=[],(t=Object(d.o)(t)).options.middleware&&(r=r.concat(t.options.middleware)),e.forEach(function(e){e.options.middleware&&(r=r.concat(e.options.middleware))})),r=r.map(function(e){return"function"==typeof e?e:("function"!=typeof c.a[e]&&(l=!0,o.error({statusCode:500,message:"Unknown middleware "+e})),c.a[e])}),!l)return Object(d.k)(r,n)}function I(e,n,t){return A.apply(this,arguments)}function A(){return(A=Object(o.a)(regeneratorRuntime.mark(function e(n,t,o){var r,l,c,y,m,v,x,j,_,S,C,I,A,O,E,P,W=this;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!1!==this._pathChanged||!1!==this._queryChanged){e.next=2;break}return e.abrupt("return",o());case 2:return n===t?w=[]:(r=[],w=Object(d.e)(t,r).map(function(e,i){return Object(d.b)(t.matched[r[i]].path)(t.params)})),l=!1,c=function(path){t.path===path.path&&W.$loading.finish&&W.$loading.finish(),t.path!==path.path&&W.$loading.pause&&W.$loading.pause(),l||(l=!0,o(path))},e.next=7,Object(d.p)(f,{route:n,from:t,next:c.bind(this)});case 7:if(this._dateLastError=f.nuxt.dateErr,this._hadError=!!f.nuxt.err,y=[],(m=Object(d.e)(n,y)).length){e.next=25;break}return e.next=14,T.call(this,m,f.context);case 14:if(!l){e.next=16;break}return e.abrupt("return");case 16:return e.next=18,this.loadLayout("function"==typeof h.a.layout?h.a.layout(f.context):h.a.layout);case 18:return v=e.sent,e.next=21,T.call(this,m,f.context,v);case 21:if(!l){e.next=23;break}return e.abrupt("return");case 23:return f.context.error({statusCode:404,message:"This page could not be found"}),e.abrupt("return",o());case 25:return m.forEach(function(e){e._Ctor&&e._Ctor.options&&(e.options.asyncData=e._Ctor.options.asyncData,e.options.fetch=e._Ctor.options.fetch)}),this.setTransitions(k(m,n,t)),e.prev=27,e.next=30,T.call(this,m,f.context);case 30:if(!l){e.next=32;break}return e.abrupt("return");case 32:if(!f.context._errored){e.next=34;break}return e.abrupt("return",o());case 34:return"function"==typeof(x=m[0].options.layout)&&(x=x(f.context)),e.next=38,this.loadLayout(x);case 38:return x=e.sent,e.next=41,T.call(this,m,f.context,x);case 41:if(!l){e.next=43;break}return e.abrupt("return");case 43:if(!f.context._errored){e.next=45;break}return e.abrupt("return",o());case 45:j=!0,e.prev=46,_=!0,S=!1,C=void 0,e.prev=50,I=m[Symbol.iterator]();case 52:if(_=(A=I.next()).done){e.next=64;break}if("function"==typeof(O=A.value).options.validate){e.next=56;break}return e.abrupt("continue",61);case 56:return e.next=58,O.options.validate(f.context);case 58:if(j=e.sent){e.next=61;break}return e.abrupt("break",64);case 61:_=!0,e.next=52;break;case 64:e.next=70;break;case 66:e.prev=66,e.t0=e.catch(50),S=!0,C=e.t0;case 70:e.prev=70,e.prev=71,_||null==I.return||I.return();case 73:if(e.prev=73,!S){e.next=76;break}throw C;case 76:return e.finish(73);case 77:return e.finish(70);case 78:e.next=84;break;case 80:return e.prev=80,e.t1=e.catch(46),this.error({statusCode:e.t1.statusCode||"500",message:e.t1.message}),e.abrupt("return",o());case 84:if(j){e.next=87;break}return this.error({statusCode:404,message:"This page could not be found"}),e.abrupt("return",o());case 87:return e.next=89,Promise.all(m.map(function(e,i){if(e._path=Object(d.b)(n.matched[y[i]].path)(n.params),e._dataRefresh=!1,W._pathChanged&&W._queryChanged||e._path!==w[i])e._dataRefresh=!0;else if(!W._pathChanged&&W._queryChanged){var t=e.options.watchQuery;!0===t?e._dataRefresh=!0:Array.isArray(t)&&(e._dataRefresh=t.some(function(e){return W._diffQuery[e]}))}if(!W._hadError&&W._isMounted&&!e._dataRefresh)return Promise.resolve();var o=[],r=e.options.asyncData&&"function"==typeof e.options.asyncData,l=!!e.options.fetch,c=r&&l?30:45;if(r){var h=Object(d.m)(e.options.asyncData,f.context).then(function(n){Object(d.a)(e,n),W.$loading.increase&&W.$loading.increase(c)});o.push(h)}if(W.$loading.manual=!1===e.options.loading,l){var p=e.options.fetch(f.context);p&&(p instanceof Promise||"function"==typeof p.then)||(p=Promise.resolve(p)),p.then(function(e){W.$loading.increase&&W.$loading.increase(c)}),o.push(p)}return Promise.all(o)}));case 89:l||(this.$loading.finish&&!this.$loading.manual&&this.$loading.finish(),o()),e.next=106;break;case 92:if(e.prev=92,e.t2=e.catch(27),"ERR_REDIRECT"!==(E=e.t2||{}).message){e.next=97;break}return e.abrupt("return",this.$nuxt.$emit("routeChanged",n,t,E));case 97:return w=[],Object(d.i)(E),"function"==typeof(P=h.a.layout)&&(P=P(f.context)),e.next=103,this.loadLayout(P);case 103:this.error(E),this.$nuxt.$emit("routeChanged",n,t,E),o();case 106:case"end":return e.stop()}},e,this,[[27,92],[46,80],[50,66,70,78],[71,,73,77]])}))).apply(this,arguments)}function O(e,t){Object(d.c)(e,function(e,t,o,l){return"object"!==Object(n.a)(e)||e.options||((e=r.a.extend(e))._Ctor=e,o.components[l]=e),e})}function E(e){this._hadError&&this._dateLastError===this.$options.nuxt.dateErr&&this.error();var n=this.$options.nuxt.err?h.a.layout:e.matched[0].components.default.options.layout;"function"==typeof n&&(n=n(f.context)),this.setLayout(n)}function P(e,n){var t=this;!1===this._pathChanged&&!1===this._queryChanged||r.a.nextTick(function(){var n=[],o=Object(d.f)(e,n),l=Object(d.e)(e,n);o.forEach(function(e,i){if(e&&e.constructor._dataRefresh&&l[i]===e.constructor&&!0!==e.$vnode.data.keepAlive&&"function"==typeof e.constructor.options.data){var n=e.constructor.options.data.call(e);for(var t in n)r.a.set(e.$data,t,n[t])}}),E.call(t,e)})}function W(e){window.onNuxtReadyCbs.forEach(function(n){"function"==typeof n&&n(e)}),"function"==typeof window._onNuxtLoaded&&window._onNuxtLoaded(e),m.afterEach(function(n,t){r.a.nextTick(function(){return e.$nuxt.$emit("routeChanged",n,t)})})}function R(){return(R=Object(o.a)(regeneratorRuntime.mark(function e(n){var t,o,l,c,h;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return f=n.app,m=n.router,n.store,e.next=5,Promise.all(C(m));case 5:return t=e.sent,o=new r.a(f),l=v.layout||"default",e.next=10,o.loadLayout(l);case 10:if(o.setLayout(l),c=function(){o.$mount("#__nuxt"),m.afterEach(O),m.afterEach(P.bind(o)),r.a.nextTick(function(){W(o)})},o.setTransitions=o.$options.nuxt.setTransitions.bind(o),t.length&&(o.setTransitions(k(t,m.currentRoute)),w=m.currentRoute.matched.map(function(e){return Object(d.b)(e.path)(m.currentRoute.params)})),o.$loading={},v.error&&o.error(v.error),m.beforeEach(j.bind(o)),m.beforeEach(I.bind(o)),!v.serverRendered){e.next=21;break}return c(),e.abrupt("return");case 21:h=function(){O(m.currentRoute,m.currentRoute),E.call(o,m.currentRoute),c()},I.call(o,m.currentRoute,m.currentRoute,function(path){if(path){var e=m.afterEach(function(n,t){e(),h()});m.push(path,void 0,function(e){e&&x(e)})}else h()});case 23:case"end":return e.stop()}},e)}))).apply(this,arguments)}Object(h.b)().then(function(e){return R.apply(this,arguments)}).catch(function(e){var n=new Error(e);n.message="[nuxt] Error while mounting app: "+n.message,x(n)})}.call(this,t(21))},295:function(e,n,t){"use strict";var o=t(56);t.n(o).a},296:function(e,n,t){(e.exports=t(42)(!1)).push([e.i,".__nuxt-error-page{padding:1rem;background:#f7f8fb;color:#47494e;text-align:center;display:flex;justify-content:center;align-items:center;flex-direction:column;font-family:sans-serif;font-weight:100!important;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;-webkit-font-smoothing:antialiased;position:absolute;top:0;left:0;right:0;bottom:0}.__nuxt-error-page .error{max-width:450px}.__nuxt-error-page .title{font-size:1.5rem;margin-top:15px;color:#47494e;margin-bottom:8px}.__nuxt-error-page .description{color:#7f828b;line-height:21px;margin-bottom:10px}.__nuxt-error-page a{color:#7f828b!important;text-decoration:none}.__nuxt-error-page .logo{position:fixed;left:12px;bottom:12px}",""])},297:function(e,n,t){"use strict";var o=t(57);t.n(o).a},298:function(e,n,t){(e.exports=t(42)(!1)).push([e.i,".nuxt-progress{position:fixed;top:0;left:0;right:0;height:2px;width:0;opacity:1;transition:width .1s,opacity .4s;background-color:#fff;z-index:999999}.nuxt-progress.nuxt-progress-notransition{transition:none}.nuxt-progress-failed{background-color:red}",""])},299:function(e,n,t){"use strict";var o=t(58);t.n(o).a},300:function(e,n,t){(e.exports=t(42)(!1)).push([e.i,'body,div#root{overflow-x:hidden}body,html{margin:0;padding:0;border:0;outline:0;vertical-align:baseline;background:0 0}.single-page .mid-box-background{padding-top:2rem;padding-bottom:2rem}.App{text-align:center}.App-header{position:fixed;top:0;left:0;width:100%;height:70vh;background-color:#222;padding:20vh 20px 20px;padding-left:0!important;color:#fff}.background-colours{opacity:.1}.background{position:absolute;top:0;right:0;bottom:0;left:0;background:#093054;background:-webkit-gradient(left top,right bottom,color-stop(0,#093054),color-stop(100%,#0b1042));background:linear-gradient(135deg,#093054,#0b1042);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#093054",endColorstr="#0b1042",GradientType=1)}.title-wrapper h1{font-size:3.1em!important;line-height:1.4;font-weight:700;color:#fff}.App-content{min-height:100vh;width:100vw;position:relative;background:#fff;z-index:9}.lazy{opacity:1;transition:opacity .3s}.lazy[data-src]{opacity:0}#OpeningContentWrapper img{max-height:80px;height:120px;margin-bottom:20px;margin-top:20px;width:auto}#BlogPostOpenerWrapper{display:inline-block;padding-top:40px;padding-bottom:40px;margin-top:20px;width:100%;color:#fff}#OpeningContentSocial a{text-decoration:none}#default-typed-strings,#second-typed-strings-delay,#third-typed-strings-delay,#typed-strings,#typed-strings-delay,.scroll-down{display:none}#OpeningContentWrapper p,#welcometomysite,.homepage-subtitle{display:inline-block}.homepage-subtitle #typed,.typed-cursor{font-size:1.5em!important}.typed-cursor{margin-left:10px}@media only screen and (min-width:992px){#OpeningContentWrapper{padding-top:0;padding-right:120px}#welcometomysite{margin-left:.25em}#MusicOpeningWrapper,div#OpeningContentWrapperWrap{padding-left:0!important;padding-right:0!important}}#welcometomysite{font-size:2.5em}.post-img{width:100%;height:auto;max-height:200px}.homepage-subtitle{width:calc(100% - 20px);overflow:hidden;text-overflow:ellipsis;margin-left:10px;margin-right:10px}#BlogandMoreAboutSeconndWrapper .card{overflow:hidden}#BlogandMoreAboutSeconndWrapper .card .image{margin-left:-1rem;margin-right:-1rem;margin-top:-1rem}.post-button.ui.bottom.button{margin-left:-1em;margin-top:-.75em;margin-bottom:-1em;border-radius:0;padding-bottom:1em;background:#19034e;color:#fff;width:calc(100% - 1em)}#TwitterLinkWrap,.social-icon{margin-left:10px;margin-right:10px;display:inline-block}.social-icon{max-width:40px}#cookie-law{position:fixed;bottom:10px;right:10px;width:100%;max-width:320px;background:#f6f6f6;border:1px solid #333;z-index:999;padding:5px}#blogLoadMoreButton{margin-top:20px;background:#ddd;color:#000}div#customSpotifyRight{height:300px}div#customSpotifyRightElementSongWrapper{height:100%;position:relative}div#customSpotifyRightElementSongContainer{height:100%;background-size:cover}div#customSpotifyRightElementSongOverlay{position:absolute;top:0;left:0;background:0 0;width:100%;height:100%;color:#fff}div#nowPlayingOverlay{position:absolute;right:0;top:0;background:#0b0444;padding:10px}#customSpotifyLeft,#customSpotifyRight,.leftSideSong div,a.trackLinkFloat{padding:0!important}div#customSpotifyRightElementSongOverlayContent{margin-top:100px}.trackLinkPlay svg{max-width:50px;fill:#fff;margin-top:10px}.trackLinkPlay svg path{fill:#fff}div#customSpotifyRightElementSongOverlayContent span,div#spotifyOpenerWrapper{display:inline-block;width:100%}div#spotifyOpenerWrapper{margin-top:50px;border-top:1px solid #ddd;border-bottom:1px solid}.leftSideSong{background:#000;color:#fff;position:relative}a.trackLinkFloat{position:absolute;top:0;left:0;width:100%;height:100%;margin:0!important;z-index:999}div#customSpotifyLeftElementSongWrapper{margin-top:15px;background:#000}.leftSideSong,div#spotify-widget{margin-left:0!important;margin-right:0!important}#spotify-widget{margin-top:20px!important}.leftSideSong.ui.grid{border-bottom:1px solid;padding-bottom:5px;padding-top:5px}.leftSideSong h3{margin-top:0;margin-bottom:0;font-size:1em}.leftSideSong span{margin-right:5px;font-size:.8em}div#customSpotifyLeft{max-height:150px;overflow-y:scroll;overflow-x:hidden}div#mainOpeningContentWrap{margin:10vh 0 0;display:flex}div#OpeningContentWrapper{text-align:left}@media only screen and (min-width:992px){#OpeningContentWrapper p img{max-height:2.5em;height:auto;margin-bottom:0;margin-top:0;width:auto}}@media only screen and (max-width:992px){#OpeningContentWrapper p img{max-height:5em;height:auto;margin-bottom:0;margin-top:0;width:auto}h2#welcometomysite{width:100%}}span#MusicOpeningWrapperTitle{display:inline-block;width:100%;margin-top:20px}div#spotify-widget{height:450px}.social-icon-wrap{font-size:2.4em;color:#000}#TwitterLinkWrap{color:#1da1f2}a#LinkedinLinkWrap{color:#0077b5}.coloured-container{background:#19034e;padding-bottom:250px;margin-top:100px}.coloured-float-container{margin-top:-250px;margin-bottom:100px}#ExtraContentWrapper{margin-top:150px;margin-bottom:150px}#SkillsContentContainer{margin-top:50px}.column.icon-grid-item{padding:0!important;text-align:center}.icon-grid-item img{max-width:50px!important}.icon-grid-item span{width:100%;display:inline-block;margin-top:10px}#SkillsContentContainer h3{margin-bottom:50px;margin-top:50px;display:inline-block;width:100%}.cookies.js-cookie-message{position:fixed;bottom:20px;right:0;max-width:320px;width:100%;z-index:9999;background:#fff;border-radius:4px;padding:1rem;border:1px solid #ddd;box-shadow:0 0 10px 0 rgba(0,0,0,.1)}.cookies__box button{width:100%;padding:.5rem;background:0;border-color:#171f32;color:#171f32;font-weight:600;border-radius:4px}body{margin:0;padding:0;font-family:sans-serif}header{background:#000;width:calc(100% - 2rem);padding:1rem}.text-normal{text-align:left;text-align:initial}header .site-title-header{display:inline-block;width:auto;font-size:1.5rem;color:#a3a7ae;font-weight:600}header .site-title-header a{text-decoration:none;color:#a3a7ae}header .site-links-header{display:inline-block;float:right}header .site-links-header a{color:#485569;text-transform:uppercase;text-decoration:none;font-size:1rem;padding:.25rem;display:inline-block}header a:hover{color:#fff!important}.ui.container{display:block;max-width:100%!important}@media only screen and (max-width:767px){.ui.container,.ui.grid.container,.ui.relaxed.grid.container,.ui.very.relaxed.grid.container{width:auto!important}.ui.container{margin-left:1em!important;margin-right:1em!important}}@media only screen and (min-width:768px) and (max-width:991px){.ui.container{width:723px;margin-left:auto!important;margin-right:auto!important}.ui.grid.container{width:calc(723px + 2rem)!important}.ui.relaxed.grid.container{width:calc(723px + 3rem)!important}.ui.very.relaxed.grid.container{width:calc(723px + 5rem)!important}}@media only screen and (min-width:992px) and (max-width:1199px){.ui.container{width:933px;margin-left:auto!important;margin-right:auto!important}.ui.grid.container{width:calc(933px + 2rem)!important}.ui.relaxed.grid.container{width:calc(933px + 3rem)!important}.ui.very.relaxed.grid.container{width:calc(933px + 5rem)!important}}@media only screen and (min-width:1200px){.ui.container{width:1127px;margin-left:auto!important;margin-right:auto!important}.ui.grid.container{width:calc(1127px + 2rem)!important}.ui.relaxed.grid.container{width:calc(1127px + 3rem)!important}.ui.very.relaxed.grid.container{width:calc(1127px + 5rem)!important}}#BlogContentContainer .card .image{max-height:220px;overflow:hidden}.repo-language-color{border-radius:50%;display:inline-block;height:12px;position:relative;top:1px;width:12px;background-color:#19034e}#githubReposContainer{margin:0;padding-top:1rem}.PHP .repo-language-color{background-color:#777bb4}.HTML .repo-language-color{background-color:#e34f25}.CSS .repo-language-color{background-color:#1372b6}.JavaScript .repo-language-color{background-color:#f7df1c}.repo-language-color{margin-right:5px!important}.card .content a.header{text-decoration:none;margin-bottom:5px}pre{background:#272727;color:#fff;padding:20px;white-space:pre-wrap;font-size:16px;font-family:Menlo,Monaco,Courier New,Courier,monospace;overflow:auto}.post-content-sidebar{max-width:320px}.App-content{top:0!important;margin-top:90vh}.single-page .App-content{top:0!important;margin-top:0!important}.social-icon-wrap svg{width:32px;height:auto}#TwitterLinkWrap svg,#TwitterLinkWrap svg path{fill:#1da1f2!important}#LinkedinLinkWrap svg,#LinkedinLinkWrap svg path{fill:#0077b5}.social-icon-wrap:hover svg{opacity:.6}@media only screen and (max-width:768px){.App-header.full-height-header{height:100%;padding-top:20px}}#MusicOpeningWrapperTitle svg{width:14px;display:inline-block;-webkit-transform:rotate(180deg);transform:rotate(180deg)}img.lazy.loaded{opacity:1!important}.alert.alert-danger{color:#d22d2d}.alert{width:100%;margin-bottom:20px;text-align:left}.button-block{display:block;width:100%}.button{border:0;outline:none;border-radius:0;padding:15px 0;font-size:22px;font-weight:600;text-transform:uppercase;letter-spacing:.1em;background:transparent;color:#fff;transition:all .5s ease;-webkit-appearance:none}.header-single-image-full img{width:100%;height:auto;top:50%;transition:translateY(-50%);position:relative}.post-header-titles{max-width:780px;margin:-70px auto auto;background:#fff;z-index:99;position:relative;padding:1rem}.header-single-image-full{max-height:500px;overflow:hidden;width:100%;height:auto;vertical-align:middle;display:block}',""])},301:function(e,n,t){"use strict";var o=t(59);t.n(o).a},302:function(e,n,t){(e.exports=t(42)(!1)).push([e.i,'body,div#root{overflow-x:hidden}body,html{margin:0;padding:0;border:0;outline:0;vertical-align:baseline;background:0 0}.single-page .mid-box-background{padding-top:2rem;padding-bottom:2rem}.App{text-align:center}.App-header{position:fixed;top:0;left:0;width:100%;height:70vh;background-color:#222;padding:20vh 20px 20px;padding-left:0!important;color:#fff}.background-colours{opacity:.1}.background{position:absolute;top:0;right:0;bottom:0;left:0;background:#093054;background:-webkit-gradient(left top,right bottom,color-stop(0,#093054),color-stop(100%,#0b1042));background:linear-gradient(135deg,#093054,#0b1042);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#093054",endColorstr="#0b1042",GradientType=1)}.title-wrapper h1{font-size:3.1em!important;line-height:1.4;font-weight:700;color:#fff}.App-content{min-height:100vh;width:100vw;position:relative;background:#fff;z-index:9}.lazy{opacity:1;transition:opacity .3s}.lazy[data-src]{opacity:0}#OpeningContentWrapper img{max-height:80px;height:120px;margin-bottom:20px;margin-top:20px;width:auto}#BlogPostOpenerWrapper{display:inline-block;padding-top:40px;padding-bottom:40px;margin-top:20px;width:100%;color:#fff}#OpeningContentSocial a{text-decoration:none}#default-typed-strings,#second-typed-strings-delay,#third-typed-strings-delay,#typed-strings,#typed-strings-delay,.scroll-down{display:none}#OpeningContentWrapper p,#welcometomysite,.homepage-subtitle{display:inline-block}.homepage-subtitle #typed,.typed-cursor{font-size:1.5em!important}.typed-cursor{margin-left:10px}@media only screen and (min-width:992px){#OpeningContentWrapper{padding-top:0;padding-right:120px}#welcometomysite{margin-left:.25em}#MusicOpeningWrapper,div#OpeningContentWrapperWrap{padding-left:0!important;padding-right:0!important}}#welcometomysite{font-size:2.5em}.post-img{width:100%;height:auto;max-height:200px}.homepage-subtitle{width:calc(100% - 20px);overflow:hidden;text-overflow:ellipsis;margin-left:10px;margin-right:10px}#BlogandMoreAboutSeconndWrapper .card{overflow:hidden}#BlogandMoreAboutSeconndWrapper .card .image{margin-left:-1rem;margin-right:-1rem;margin-top:-1rem}.post-button.ui.bottom.button{margin-left:-1em;margin-top:-.75em;margin-bottom:-1em;border-radius:0;padding-bottom:1em;background:#19034e;color:#fff;width:calc(100% - 1em)}#TwitterLinkWrap,.social-icon{margin-left:10px;margin-right:10px;display:inline-block}.social-icon{max-width:40px}#cookie-law{position:fixed;bottom:10px;right:10px;width:100%;max-width:320px;background:#f6f6f6;border:1px solid #333;z-index:999;padding:5px}#blogLoadMoreButton{margin-top:20px;background:#ddd;color:#000}div#customSpotifyRight{height:300px}div#customSpotifyRightElementSongWrapper{height:100%;position:relative}div#customSpotifyRightElementSongContainer{height:100%;background-size:cover}div#customSpotifyRightElementSongOverlay{position:absolute;top:0;left:0;background:0 0;width:100%;height:100%;color:#fff}div#nowPlayingOverlay{position:absolute;right:0;top:0;background:#0b0444;padding:10px}#customSpotifyLeft,#customSpotifyRight,.leftSideSong div,a.trackLinkFloat{padding:0!important}div#customSpotifyRightElementSongOverlayContent{margin-top:100px}.trackLinkPlay svg{max-width:50px;fill:#fff;margin-top:10px}.trackLinkPlay svg path{fill:#fff}div#customSpotifyRightElementSongOverlayContent span,div#spotifyOpenerWrapper{display:inline-block;width:100%}div#spotifyOpenerWrapper{margin-top:50px;border-top:1px solid #ddd;border-bottom:1px solid}.leftSideSong{background:#000;color:#fff;position:relative}a.trackLinkFloat{position:absolute;top:0;left:0;width:100%;height:100%;margin:0!important;z-index:999}div#customSpotifyLeftElementSongWrapper{margin-top:15px;background:#000}.leftSideSong,div#spotify-widget{margin-left:0!important;margin-right:0!important}#spotify-widget{margin-top:20px!important}.leftSideSong.ui.grid{border-bottom:1px solid;padding-bottom:5px;padding-top:5px}.leftSideSong h3{margin-top:0;margin-bottom:0;font-size:1em}.leftSideSong span{margin-right:5px;font-size:.8em}div#customSpotifyLeft{max-height:150px;overflow-y:scroll;overflow-x:hidden}div#mainOpeningContentWrap{margin:10vh 0 0;display:flex}div#OpeningContentWrapper{text-align:left}@media only screen and (min-width:992px){#OpeningContentWrapper p img{max-height:2.5em;height:auto;margin-bottom:0;margin-top:0;width:auto}}@media only screen and (max-width:992px){#OpeningContentWrapper p img{max-height:5em;height:auto;margin-bottom:0;margin-top:0;width:auto}h2#welcometomysite{width:100%}}span#MusicOpeningWrapperTitle{display:inline-block;width:100%;margin-top:20px}div#spotify-widget{height:450px}.social-icon-wrap{font-size:2.4em;color:#000}#TwitterLinkWrap{color:#1da1f2}a#LinkedinLinkWrap{color:#0077b5}.coloured-container{background:#19034e;padding-bottom:250px;margin-top:100px}.coloured-float-container{margin-top:-250px;margin-bottom:100px}#ExtraContentWrapper{margin-top:150px;margin-bottom:150px}#SkillsContentContainer{margin-top:50px}.column.icon-grid-item{padding:0!important;text-align:center}.icon-grid-item img{max-width:50px!important}.icon-grid-item span{width:100%;display:inline-block;margin-top:10px}#SkillsContentContainer h3{margin-bottom:50px;margin-top:50px;display:inline-block;width:100%}.cookies.js-cookie-message{position:fixed;bottom:20px;right:0;max-width:320px;width:100%;z-index:9999;background:#fff;border-radius:4px;padding:1rem;border:1px solid #ddd;box-shadow:0 0 10px 0 rgba(0,0,0,.1)}.cookies__box button{width:100%;padding:.5rem;background:0;border-color:#171f32;color:#171f32;font-weight:600;border-radius:4px}body{margin:0;padding:0;font-family:sans-serif}header{background:#000;width:calc(100% - 2rem);padding:1rem}.text-normal{text-align:left;text-align:initial}header .site-title-header{display:inline-block;width:auto;font-size:1.5rem;color:#a3a7ae;font-weight:600}header .site-title-header a{text-decoration:none;color:#a3a7ae}header .site-links-header{display:inline-block;float:right}header .site-links-header a{color:#485569;text-transform:uppercase;text-decoration:none;font-size:1rem;padding:.25rem;display:inline-block}header a:hover{color:#fff!important}.ui.container{display:block;max-width:100%!important}@media only screen and (max-width:767px){.ui.container,.ui.grid.container,.ui.relaxed.grid.container,.ui.very.relaxed.grid.container{width:auto!important}.ui.container{margin-left:1em!important;margin-right:1em!important}}@media only screen and (min-width:768px) and (max-width:991px){.ui.container{width:723px;margin-left:auto!important;margin-right:auto!important}.ui.grid.container{width:calc(723px + 2rem)!important}.ui.relaxed.grid.container{width:calc(723px + 3rem)!important}.ui.very.relaxed.grid.container{width:calc(723px + 5rem)!important}}@media only screen and (min-width:992px) and (max-width:1199px){.ui.container{width:933px;margin-left:auto!important;margin-right:auto!important}.ui.grid.container{width:calc(933px + 2rem)!important}.ui.relaxed.grid.container{width:calc(933px + 3rem)!important}.ui.very.relaxed.grid.container{width:calc(933px + 5rem)!important}}@media only screen and (min-width:1200px){.ui.container{width:1127px;margin-left:auto!important;margin-right:auto!important}.ui.grid.container{width:calc(1127px + 2rem)!important}.ui.relaxed.grid.container{width:calc(1127px + 3rem)!important}.ui.very.relaxed.grid.container{width:calc(1127px + 5rem)!important}}#BlogContentContainer .card .image{max-height:220px;overflow:hidden}.repo-language-color{border-radius:50%;display:inline-block;height:12px;position:relative;top:1px;width:12px;background-color:#19034e}#githubReposContainer{margin:0;padding-top:1rem}.PHP .repo-language-color{background-color:#777bb4}.HTML .repo-language-color{background-color:#e34f25}.CSS .repo-language-color{background-color:#1372b6}.JavaScript .repo-language-color{background-color:#f7df1c}.repo-language-color{margin-right:5px!important}.card .content a.header{text-decoration:none;margin-bottom:5px}pre{background:#272727;color:#fff;white-space:pre-wrap;font-size:16px;font-family:Menlo,Monaco,Courier New,Courier,monospace;overflow:auto}.post-content-sidebar{max-width:320px}.App-content{top:0!important;margin-top:90vh}.single-page .App-content{top:0!important;margin-top:0!important}.social-icon-wrap svg{width:32px;height:auto}#TwitterLinkWrap svg,#TwitterLinkWrap svg path{fill:#1da1f2!important}#LinkedinLinkWrap svg,#LinkedinLinkWrap svg path{fill:#0077b5}.social-icon-wrap:hover svg{opacity:.6}@media only screen and (max-width:768px){.App-header.full-height-header{height:100%;padding-top:20px}}#MusicOpeningWrapperTitle svg{width:14px;display:inline-block;-webkit-transform:rotate(180deg);transform:rotate(180deg)}img.lazy.loaded{opacity:1!important}.alert.alert-danger{color:#d22d2d}.alert{width:100%;margin-bottom:20px;text-align:left}.button-block{display:block;width:100%}.button{border:0;outline:none;border-radius:0;padding:15px 0;font-size:22px;font-weight:600;text-transform:uppercase;letter-spacing:.1em;background:transparent;color:#fff;transition:all .5s ease;-webkit-appearance:none}',""])},303:function(e,n,t){"use strict";t.r(n),t.d(n,"state",function(){return r}),t.d(n,"mutations",function(){return l}),t.d(n,"actions",function(){return c});t(29),t(22),t(32);var o=t(6),r=function(){return{bloglist:[]}},l={set:function(e,n){e.bloglist=n}},c={nuxtServerInit:function(){var e=Object(o.a)(regeneratorRuntime.mark(function e(n){var o,r,l,c,d;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return o=n.commit,r=t(245),l=t(0),e.next=5,t(331);case 5:return c=e.sent,d=c.keys().map(function(e){var n=c(e);return n.slug=e.slice(2,-3),n}).map(function(e){var n=r(e.default).attributes;return n.slug=e.slug,n.ctime=l(n.ctime).format("YYYY-MM-DD"),n}).sort(function(a,b){return a.ctime<b.ctime}),e.next=9,o("set",d);case 9:case"end":return e.stop()}},e)}));return function(n){return e.apply(this,arguments)}}()}},330:function(e,n,t){var map={"./af":105,"./af.js":105,"./ar":106,"./ar-dz":107,"./ar-dz.js":107,"./ar-kw":108,"./ar-kw.js":108,"./ar-ly":109,"./ar-ly.js":109,"./ar-ma":110,"./ar-ma.js":110,"./ar-sa":111,"./ar-sa.js":111,"./ar-tn":112,"./ar-tn.js":112,"./ar.js":106,"./az":113,"./az.js":113,"./be":114,"./be.js":114,"./bg":115,"./bg.js":115,"./bm":116,"./bm.js":116,"./bn":117,"./bn.js":117,"./bo":118,"./bo.js":118,"./br":119,"./br.js":119,"./bs":120,"./bs.js":120,"./ca":121,"./ca.js":121,"./cs":122,"./cs.js":122,"./cv":123,"./cv.js":123,"./cy":124,"./cy.js":124,"./da":125,"./da.js":125,"./de":126,"./de-at":127,"./de-at.js":127,"./de-ch":128,"./de-ch.js":128,"./de.js":126,"./dv":129,"./dv.js":129,"./el":130,"./el.js":130,"./en-SG":131,"./en-SG.js":131,"./en-au":132,"./en-au.js":132,"./en-ca":133,"./en-ca.js":133,"./en-gb":134,"./en-gb.js":134,"./en-ie":135,"./en-ie.js":135,"./en-il":136,"./en-il.js":136,"./en-nz":137,"./en-nz.js":137,"./eo":138,"./eo.js":138,"./es":139,"./es-do":140,"./es-do.js":140,"./es-us":141,"./es-us.js":141,"./es.js":139,"./et":142,"./et.js":142,"./eu":143,"./eu.js":143,"./fa":144,"./fa.js":144,"./fi":145,"./fi.js":145,"./fo":146,"./fo.js":146,"./fr":147,"./fr-ca":148,"./fr-ca.js":148,"./fr-ch":149,"./fr-ch.js":149,"./fr.js":147,"./fy":150,"./fy.js":150,"./ga":151,"./ga.js":151,"./gd":152,"./gd.js":152,"./gl":153,"./gl.js":153,"./gom-latn":154,"./gom-latn.js":154,"./gu":155,"./gu.js":155,"./he":156,"./he.js":156,"./hi":157,"./hi.js":157,"./hr":158,"./hr.js":158,"./hu":159,"./hu.js":159,"./hy-am":160,"./hy-am.js":160,"./id":161,"./id.js":161,"./is":162,"./is.js":162,"./it":163,"./it-ch":164,"./it-ch.js":164,"./it.js":163,"./ja":165,"./ja.js":165,"./jv":166,"./jv.js":166,"./ka":167,"./ka.js":167,"./kk":168,"./kk.js":168,"./km":169,"./km.js":169,"./kn":170,"./kn.js":170,"./ko":171,"./ko.js":171,"./ku":172,"./ku.js":172,"./ky":173,"./ky.js":173,"./lb":174,"./lb.js":174,"./lo":175,"./lo.js":175,"./lt":176,"./lt.js":176,"./lv":177,"./lv.js":177,"./me":178,"./me.js":178,"./mi":179,"./mi.js":179,"./mk":180,"./mk.js":180,"./ml":181,"./ml.js":181,"./mn":182,"./mn.js":182,"./mr":183,"./mr.js":183,"./ms":184,"./ms-my":185,"./ms-my.js":185,"./ms.js":184,"./mt":186,"./mt.js":186,"./my":187,"./my.js":187,"./nb":188,"./nb.js":188,"./ne":189,"./ne.js":189,"./nl":190,"./nl-be":191,"./nl-be.js":191,"./nl.js":190,"./nn":192,"./nn.js":192,"./pa-in":193,"./pa-in.js":193,"./pl":194,"./pl.js":194,"./pt":195,"./pt-br":196,"./pt-br.js":196,"./pt.js":195,"./ro":197,"./ro.js":197,"./ru":198,"./ru.js":198,"./sd":199,"./sd.js":199,"./se":200,"./se.js":200,"./si":201,"./si.js":201,"./sk":202,"./sk.js":202,"./sl":203,"./sl.js":203,"./sq":204,"./sq.js":204,"./sr":205,"./sr-cyrl":206,"./sr-cyrl.js":206,"./sr.js":205,"./ss":207,"./ss.js":207,"./sv":208,"./sv.js":208,"./sw":209,"./sw.js":209,"./ta":210,"./ta.js":210,"./te":211,"./te.js":211,"./tet":212,"./tet.js":212,"./tg":213,"./tg.js":213,"./th":214,"./th.js":214,"./tl-ph":215,"./tl-ph.js":215,"./tlh":216,"./tlh.js":216,"./tr":217,"./tr.js":217,"./tzl":218,"./tzl.js":218,"./tzm":219,"./tzm-latn":220,"./tzm-latn.js":220,"./tzm.js":219,"./ug-cn":221,"./ug-cn.js":221,"./uk":222,"./uk.js":222,"./ur":223,"./ur.js":223,"./uz":224,"./uz-latn":225,"./uz-latn.js":225,"./uz.js":224,"./vi":226,"./vi.js":226,"./x-pseudo":227,"./x-pseudo.js":227,"./yo":228,"./yo.js":228,"./zh-cn":229,"./zh-cn.js":229,"./zh-hk":230,"./zh-hk.js":230,"./zh-tw":231,"./zh-tw.js":231};function o(e){var n=r(e);return t(n)}function r(e){if(!t.o(map,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return map[e]}o.keys=function(){return Object.keys(map)},o.resolve=r,e.exports=o,o.id=330},331:function(e,n,t){var map={"./5c7af91ae6bdacc5ee62ecfe.md":247,"./5c7be6e2a1e5fbe51cd94950.md":248,"./5c7c00ffa1e5fbe51cd94951.md":249,"./5ce13a901c9d4400004275bd.md":250,"./5ce1adde1c9d4400007337c6.md":251,"./5ce1f1631c9d440000cbc59c.md":252};function o(e){var n=r(e);return t(n)}function r(e){if(!t.o(map,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return map[e]}o.keys=function(){return Object.keys(map)},o.resolve=r,e.exports=o,o.id=331},56:function(e,n,t){var content=t(296);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(43).default)("b675d82e",content,!0,{sourceMap:!1})},57:function(e,n,t){var content=t(298);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(43).default)("17cfdfa9",content,!0,{sourceMap:!1})},58:function(e,n,t){var content=t(300);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(43).default)("aab9a468",content,!0,{sourceMap:!1})},59:function(e,n,t){var content=t(302);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(43).default)("30aec7d8",content,!0,{sourceMap:!1})},60:function(e,n,t){"use strict";t(48),t(49),t(29),t(69),t(93);var o=t(2),r=window.requestIdleCallback||function(e){var n=Date.now();return setTimeout(function(){e({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-n))}})},1)},l=window.IntersectionObserver&&new window.IntersectionObserver(function(e){e.forEach(function(e){var n=e.intersectionRatio,link=e.target;n<=0||link.__prefetch()})});n.a={name:"NuxtLink",extends:o.a.component("RouterLink"),props:{noPrefetch:{type:Boolean,default:!1}},mounted:function(){this.noPrefetch||r(this.observe,{timeout:2e3})},beforeDestroy:function(){this.__observed&&(l.unobserve(this.$el),delete this.$el.__prefetch)},methods:{observe:function(){l&&this.shouldPrefetch()&&(this.$el.__prefetch=this.prefetch.bind(this),l.observe(this.$el),this.__observed=!0)},shouldPrefetch:function(){return this.getPrefetchComponents().length>0},canPrefetch:function(){var e=navigator.connection;return!(this.$nuxt.isOffline||e&&((e.effectiveType||"").includes("2g")||e.saveData))},getPrefetchComponents:function(){return this.$router.resolve(this.to,this.$route,this.append).resolved.matched.map(function(e){return e.components.default}).filter(function(e){return"function"==typeof e&&!e.options&&!e.__prefetched})},prefetch:function(){if(this.canPrefetch()){l.unobserve(this.$el);var e=this.getPrefetchComponents(),n=!0,t=!1,o=void 0;try{for(var r,c=e[Symbol.iterator]();!(n=(r=c.next()).done);n=!0){var d=r.value;d().catch(function(){}),d.__prefetched=!0}}catch(e){t=!0,o=e}finally{try{n||null==c.return||c.return()}finally{if(t)throw o}}}}}}},76:function(e,n,t){"use strict";n.a={}},79:function(e,n){"serviceWorker"in navigator?navigator.serviceWorker.register("/sw.js",{scope:"/"}).then(function(e){window.$sw=e}).catch(function(e){console.error("Service worker registration failed:",e)}):console.warn("Service workers are not supported.")}},[[253,11,1,12]]]);